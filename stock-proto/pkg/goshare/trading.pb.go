// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trading.proto

package goshare

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 接口类型
type RouteType int32

const (
	// CTP 期货
	RouteType_RT_CTP_FUTURE RouteType = 0
	// CTP 股票
	RouteType_RT_CTP_STOCK RouteType = 1
	// IB
	RouteType_RT_INTERACTIVE_BROKER RouteType = 2
	// LTS
	RouteType_RT_LTS RouteType = 3
	// CATS
	RouteType_RT_CATS RouteType = 4
	// CTP 个股期权
	RouteType_RT_CTP_STOCK_OPTION RouteType = 5
	// 金仕达个股
	RouteType_RT_KSOP RouteType = 7
)

var RouteType_name = map[int32]string{
	0: "RT_CTP_FUTURE",
	1: "RT_CTP_STOCK",
	2: "RT_INTERACTIVE_BROKER",
	3: "RT_LTS",
	4: "RT_CATS",
	5: "RT_CTP_STOCK_OPTION",
	7: "RT_KSOP",
}

var RouteType_value = map[string]int32{
	"RT_CTP_FUTURE":         0,
	"RT_CTP_STOCK":          1,
	"RT_INTERACTIVE_BROKER": 2,
	"RT_LTS":                3,
	"RT_CATS":               4,
	"RT_CTP_STOCK_OPTION":   5,
	"RT_KSOP":               7,
}

func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}

func (RouteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{0}
}

// TradingRoute 交易通道
type TradingRoute struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment              string    `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	BrokerId             string    `protobuf:"bytes,4,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	RouteType            RouteType `protobuf:"varint,5,opt,name=route_type,json=routeType,proto3,enum=goshare.RouteType" json:"route_type,omitempty"`
	TradingFrontList     []string  `protobuf:"bytes,6,rep,name=trading_front_list,json=tradingFrontList,proto3" json:"trading_front_list,omitempty"`
	MarketDataFrontList  []string  `protobuf:"bytes,7,rep,name=market_data_front_list,json=marketDataFrontList,proto3" json:"market_data_front_list,omitempty"`
	UserProductInfo      string    `protobuf:"bytes,8,opt,name=user_product_info,json=userProductInfo,proto3" json:"user_product_info,omitempty"`
	AuthCode             string    `protobuf:"bytes,9,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	User                 string    `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TradingRoute) Reset()         { *m = TradingRoute{} }
func (m *TradingRoute) String() string { return proto.CompactTextString(m) }
func (*TradingRoute) ProtoMessage()    {}
func (*TradingRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{0}
}

func (m *TradingRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingRoute.Unmarshal(m, b)
}
func (m *TradingRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingRoute.Marshal(b, m, deterministic)
}
func (m *TradingRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRoute.Merge(m, src)
}
func (m *TradingRoute) XXX_Size() int {
	return xxx_messageInfo_TradingRoute.Size(m)
}
func (m *TradingRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRoute proto.InternalMessageInfo

func (m *TradingRoute) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TradingRoute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TradingRoute) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradingRoute) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *TradingRoute) GetRouteType() RouteType {
	if m != nil {
		return m.RouteType
	}
	return RouteType_RT_CTP_FUTURE
}

func (m *TradingRoute) GetTradingFrontList() []string {
	if m != nil {
		return m.TradingFrontList
	}
	return nil
}

func (m *TradingRoute) GetMarketDataFrontList() []string {
	if m != nil {
		return m.MarketDataFrontList
	}
	return nil
}

func (m *TradingRoute) GetUserProductInfo() string {
	if m != nil {
		return m.UserProductInfo
	}
	return ""
}

func (m *TradingRoute) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *TradingRoute) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type TradingRouteList struct {
	List                 []*TradingRoute `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TradingRouteList) Reset()         { *m = TradingRouteList{} }
func (m *TradingRouteList) String() string { return proto.CompactTextString(m) }
func (*TradingRouteList) ProtoMessage()    {}
func (*TradingRouteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{1}
}

func (m *TradingRouteList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingRouteList.Unmarshal(m, b)
}
func (m *TradingRouteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingRouteList.Marshal(b, m, deterministic)
}
func (m *TradingRouteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRouteList.Merge(m, src)
}
func (m *TradingRouteList) XXX_Size() int {
	return xxx_messageInfo_TradingRouteList.Size(m)
}
func (m *TradingRouteList) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRouteList.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRouteList proto.InternalMessageInfo

func (m *TradingRouteList) GetList() []*TradingRoute {
	if m != nil {
		return m.List
	}
	return nil
}

// TradingAccount 交易账号
type TradingAccount struct {
	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// 通道
	TradingRoute *TradingRoute `protobuf:"bytes,4,opt,name=trading_route,json=tradingRoute,proto3" json:"trading_route,omitempty"`
	// 账号
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 密码
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// 密码2
	Password2 string `protobuf:"bytes,7,opt,name=password2,proto3" json:"password2,omitempty"`
	// 密码3
	Password3 string `protobuf:"bytes,8,opt,name=password3,proto3" json:"password3,omitempty"`
	// 防止自成交
	PreventSelfMatching bool `protobuf:"varint,9,opt,name=prevent_self_matching,json=preventSelfMatching,proto3" json:"prevent_self_matching,omitempty"`
	// 期权限仓数量
	StockOptionPositionLimit int32 `protobuf:"varint,10,opt,name=stock_option_position_limit,json=stockOptionPositionLimit,proto3" json:"stock_option_position_limit,omitempty"`
	// 撤单次数限制
	CancelLimit int32 `protobuf:"varint,11,opt,name=cancel_limit,json=cancelLimit,proto3" json:"cancel_limit,omitempty"`
	// 用户
	User                 string   `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradingAccount) Reset()         { *m = TradingAccount{} }
func (m *TradingAccount) String() string { return proto.CompactTextString(m) }
func (*TradingAccount) ProtoMessage()    {}
func (*TradingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{2}
}

func (m *TradingAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingAccount.Unmarshal(m, b)
}
func (m *TradingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingAccount.Marshal(b, m, deterministic)
}
func (m *TradingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingAccount.Merge(m, src)
}
func (m *TradingAccount) XXX_Size() int {
	return xxx_messageInfo_TradingAccount.Size(m)
}
func (m *TradingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_TradingAccount proto.InternalMessageInfo

func (m *TradingAccount) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TradingAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TradingAccount) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TradingAccount) GetTradingRoute() *TradingRoute {
	if m != nil {
		return m.TradingRoute
	}
	return nil
}

func (m *TradingAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TradingAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TradingAccount) GetPassword2() string {
	if m != nil {
		return m.Password2
	}
	return ""
}

func (m *TradingAccount) GetPassword3() string {
	if m != nil {
		return m.Password3
	}
	return ""
}

func (m *TradingAccount) GetPreventSelfMatching() bool {
	if m != nil {
		return m.PreventSelfMatching
	}
	return false
}

func (m *TradingAccount) GetStockOptionPositionLimit() int32 {
	if m != nil {
		return m.StockOptionPositionLimit
	}
	return 0
}

func (m *TradingAccount) GetCancelLimit() int32 {
	if m != nil {
		return m.CancelLimit
	}
	return 0
}

func (m *TradingAccount) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type TradingAccountList struct {
	List                 []*TradingAccount `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TradingAccountList) Reset()         { *m = TradingAccountList{} }
func (m *TradingAccountList) String() string { return proto.CompactTextString(m) }
func (*TradingAccountList) ProtoMessage()    {}
func (*TradingAccountList) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{3}
}

func (m *TradingAccountList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingAccountList.Unmarshal(m, b)
}
func (m *TradingAccountList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingAccountList.Marshal(b, m, deterministic)
}
func (m *TradingAccountList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingAccountList.Merge(m, src)
}
func (m *TradingAccountList) XXX_Size() int {
	return xxx_messageInfo_TradingAccountList.Size(m)
}
func (m *TradingAccountList) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingAccountList.DiscardUnknown(m)
}

var xxx_messageInfo_TradingAccountList proto.InternalMessageInfo

func (m *TradingAccountList) GetList() []*TradingAccount {
	if m != nil {
		return m.List
	}
	return nil
}

// TradingAccountSummary 资金信息
type TradingAccountSummary struct {
	// 账号
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// 结算组（可能单个结算组给个摘要)
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// 币种
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	/// 余额
	Balance float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	/// 手续费
	Commission float64 `protobuf:"fixed64,5,opt,name=commission,proto3" json:"commission,omitempty"`
	/// 占用保证金
	CurMargin float64 `protobuf:"fixed64,6,opt,name=cur_margin,json=curMargin,proto3" json:"cur_margin,omitempty"`
	/// 持仓市值
	NetPositionAmount float64 `protobuf:"fixed64,7,opt,name=net_position_amount,json=netPositionAmount,proto3" json:"net_position_amount,omitempty"`
	/// 上次余额
	PreBalance float64 `protobuf:"fixed64,8,opt,name=pre_balance,json=preBalance,proto3" json:"pre_balance,omitempty"`
	/// 利息收入
	InterestIn float64 `protobuf:"fixed64,9,opt,name=interest_in,json=interestIn,proto3" json:"interest_in,omitempty"`
	/// 存款
	Deposit float64 `protobuf:"fixed64,10,opt,name=deposit,proto3" json:"deposit,omitempty"`
	/// 取款
	Withdraw float64 `protobuf:"fixed64,11,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	/// 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`
	/// 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,13,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`
	/// 可用资金
	Available float64 `protobuf:"fixed64,14,opt,name=available,proto3" json:"available,omitempty"`
	/// 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,15,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`
	/// 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,16,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`
	// 上次质押金额
	PreMortgate float64 `protobuf:"fixed64,17,opt,name=pre_mortgate,json=preMortgate,proto3" json:"pre_mortgate,omitempty"`
	// 上次信用额度
	PreCredit float64 `protobuf:"fixed64,18,opt,name=pre_credit,json=preCredit,proto3" json:"pre_credit,omitempty"`
	// 利息基数
	InterestBase float64 `protobuf:"fixed64,19,opt,name=interest_base,json=interestBase,proto3" json:"interest_base,omitempty"`
	// 可取资金
	WithdrawAvailable float64 `protobuf:"fixed64,20,opt,name=withdraw_available,json=withdrawAvailable,proto3" json:"withdraw_available,omitempty"`
	// 基本准备金
	Reserve float64 `protobuf:"fixed64,21,opt,name=reserve,proto3" json:"reserve,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,22,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	// 信用额度
	Credit float64 `protobuf:"fixed64,23,opt,name=credit,proto3" json:"credit,omitempty"`
	// 质押金额
	Mortgate float64 `protobuf:"fixed64,24,opt,name=mortgate,proto3" json:"mortgate,omitempty"`
	// 交易所保证金
	ExchangeMargin float64 `protobuf:"fixed64,25,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`
	// 交割保证金
	DeliveryMargin float64 `protobuf:"fixed64,26,opt,name=delivery_margin,json=deliveryMargin,proto3" json:"delivery_margin,omitempty"`
	// 交易所交割保证金
	ExchangeDeliveryMargin float64 `protobuf:"fixed64,27,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin,proto3" json:"exchange_delivery_margin,omitempty"`
	// 保底期货结算准备金
	ReserveBalance float64 `protobuf:"fixed64,28,opt,name=reserve_balance,json=reserveBalance,proto3" json:"reserve_balance,omitempty"`
	// 交割手续费
	DeliveryCommission float64 `protobuf:"fixed64,29,opt,name=delivery_commission,json=deliveryCommission,proto3" json:"delivery_commission,omitempty"`
	// 冻结过户费
	FrozenTransferFee float64 `protobuf:"fixed64,30,opt,name=frozen_transfer_fee,json=frozenTransferFee,proto3" json:"frozen_transfer_fee,omitempty"`
	// 冻结的印花税
	FrozenStampTax float64 `protobuf:"fixed64,31,opt,name=frozen_stamp_tax,json=frozenStampTax,proto3" json:"frozen_stamp_tax,omitempty"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,32,opt,name=transfer_fee,json=transferFee,proto3" json:"transfer_fee,omitempty"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,33,opt,name=stamp_tax,json=stampTax,proto3" json:"stamp_tax,omitempty"`
	/// 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,34,opt,name=mtm_profit,json=mtmProfit,proto3" json:"mtm_profit,omitempty"`
	/// 盯市权益
	MtmBalance float64 `protobuf:"fixed64,35,opt,name=mtm_balance,json=mtmBalance,proto3" json:"mtm_balance,omitempty"`
	///证券总价值
	StockValue float64 `protobuf:"fixed64,36,opt,name=stock_value,json=stockValue,proto3" json:"stock_value,omitempty"`
	///国债回购占用资金
	BondRepurchaseAmount float64 `protobuf:"fixed64,37,opt,name=bond_repurchase_amount,json=bondRepurchaseAmount,proto3" json:"bond_repurchase_amount,omitempty"`
	///国债逆回购占用资金
	ReverseRepurchaseAmount float64 `protobuf:"fixed64,38,opt,name=reverse_repurchase_amount,json=reverseRepurchaseAmount,proto3" json:"reverse_repurchase_amount,omitempty"`
	///融资买入金额
	MarginTradeAmount float64 `protobuf:"fixed64,39,opt,name=margin_trade_amount,json=marginTradeAmount,proto3" json:"margin_trade_amount,omitempty"`
	///融券卖出金额
	ShortSellAmount float64 `protobuf:"fixed64,40,opt,name=short_sell_amount,json=shortSellAmount,proto3" json:"short_sell_amount,omitempty"`
	///融资持仓盈亏
	MarginTradeProfit float64 `protobuf:"fixed64,41,opt,name=margin_trade_profit,json=marginTradeProfit,proto3" json:"margin_trade_profit,omitempty"`
	///融券持仓盈亏
	PrePreferedBalance float64 `protobuf:"fixed64,42,opt,name=pre_prefered_balance,json=prePreferedBalance,proto3" json:"pre_prefered_balance,omitempty"`
	// 冻结平仓所需要费用
	FrozenCloseCommission float64 `protobuf:"fixed64,43,opt,name=frozen_close_commission,json=frozenCloseCommission,proto3" json:"frozen_close_commission,omitempty"`
	// 劣后
	CommonBalance float64 `protobuf:"fixed64,44,opt,name=common_balance,json=commonBalance,proto3" json:"common_balance,omitempty"`
	// 优先资金
	PreferedBalance float64 `protobuf:"fixed64,45,opt,name=prefered_balance,json=preferedBalance,proto3" json:"prefered_balance,omitempty"`
	// 兑换基础货币汇率
	BaseExchangeRate float64 `protobuf:"fixed64,46,opt,name=base_exchange_rate,json=baseExchangeRate,proto3" json:"base_exchange_rate,omitempty"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,47,opt,name=warning_level,json=warningLevel,proto3" json:"warning_level,omitempty"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,48,opt,name=force_close_level,json=forceCloseLevel,proto3" json:"force_close_level,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,49,opt,name=cleared_closed_profit,json=clearedClosedProfit,proto3" json:"cleared_closed_profit,omitempty"`
	// 名称
	AccountName string `protobuf:"bytes,50,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,51,opt,name=interest,proto3" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,52,opt,name=frozen_interest,json=frozenInterest,proto3" json:"frozen_interest,omitempty"`
	// 风控方案
	OptionsId int64 `protobuf:"varint,53,opt,name=options_id,json=optionsId,proto3" json:"options_id,omitempty"`
	// 方案名称
	OptionsName string `protobuf:"bytes,54,opt,name=options_name,json=optionsName,proto3" json:"options_name,omitempty"`
	// 是否激活
	Activated bool `protobuf:"varint,55,opt,name=activated,proto3" json:"activated,omitempty"`
	// 隔夜费
	OvernightFee float64 `protobuf:"fixed64,56,opt,name=overnight_fee,json=overnightFee,proto3" json:"overnight_fee,omitempty"`
	// 运营手续费
	CommissionL0 float64 `protobuf:"fixed64,57,opt,name=commission_l0,json=commissionL0,proto3" json:"commission_l0,omitempty"`
	// 多头持仓市值
	LongPositionMarketValue float64 `protobuf:"fixed64,58,opt,name=long_position_market_value,json=longPositionMarketValue,proto3" json:"long_position_market_value,omitempty"`
	// 空头持仓市值
	ShortPositionMarketValue float64 `protobuf:"fixed64,59,opt,name=short_position_market_value,json=shortPositionMarketValue,proto3" json:"short_position_market_value,omitempty"`
	// 优先入金
	PreferedDeposit float64 `protobuf:"fixed64,60,opt,name=prefered_deposit,json=preferedDeposit,proto3" json:"prefered_deposit,omitempty"`
	// 劣后入金
	CommonDeposit float64 `protobuf:"fixed64,61,opt,name=common_deposit,json=commonDeposit,proto3" json:"common_deposit,omitempty"`
	// 优先出金
	PreferedWithdraw float64 `protobuf:"fixed64,62,opt,name=prefered_withdraw,json=preferedWithdraw,proto3" json:"prefered_withdraw,omitempty"`
	// 劣后出金
	CommonWithdraw float64 `protobuf:"fixed64,63,opt,name=common_withdraw,json=commonWithdraw,proto3" json:"common_withdraw,omitempty"`
	// 部门
	Branch string `protobuf:"bytes,64,opt,name=branch,proto3" json:"branch,omitempty"`
	// 部门名称
	BranchName           string   `protobuf:"bytes,65,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradingAccountSummary) Reset()         { *m = TradingAccountSummary{} }
func (m *TradingAccountSummary) String() string { return proto.CompactTextString(m) }
func (*TradingAccountSummary) ProtoMessage()    {}
func (*TradingAccountSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{4}
}

func (m *TradingAccountSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingAccountSummary.Unmarshal(m, b)
}
func (m *TradingAccountSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingAccountSummary.Marshal(b, m, deterministic)
}
func (m *TradingAccountSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingAccountSummary.Merge(m, src)
}
func (m *TradingAccountSummary) XXX_Size() int {
	return xxx_messageInfo_TradingAccountSummary.Size(m)
}
func (m *TradingAccountSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingAccountSummary.DiscardUnknown(m)
}

var xxx_messageInfo_TradingAccountSummary proto.InternalMessageInfo

func (m *TradingAccountSummary) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TradingAccountSummary) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TradingAccountSummary) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TradingAccountSummary) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *TradingAccountSummary) GetCommission() float64 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *TradingAccountSummary) GetCurMargin() float64 {
	if m != nil {
		return m.CurMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetNetPositionAmount() float64 {
	if m != nil {
		return m.NetPositionAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetPreBalance() float64 {
	if m != nil {
		return m.PreBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetInterestIn() float64 {
	if m != nil {
		return m.InterestIn
	}
	return 0
}

func (m *TradingAccountSummary) GetDeposit() float64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *TradingAccountSummary) GetWithdraw() float64 {
	if m != nil {
		return m.Withdraw
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenMargin() float64 {
	if m != nil {
		return m.FrozenMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenCommission() float64 {
	if m != nil {
		return m.FrozenCommission
	}
	return 0
}

func (m *TradingAccountSummary) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *TradingAccountSummary) GetCloseProfit() float64 {
	if m != nil {
		return m.CloseProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetPositionProfit() float64 {
	if m != nil {
		return m.PositionProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetPreMortgate() float64 {
	if m != nil {
		return m.PreMortgate
	}
	return 0
}

func (m *TradingAccountSummary) GetPreCredit() float64 {
	if m != nil {
		return m.PreCredit
	}
	return 0
}

func (m *TradingAccountSummary) GetInterestBase() float64 {
	if m != nil {
		return m.InterestBase
	}
	return 0
}

func (m *TradingAccountSummary) GetWithdrawAvailable() float64 {
	if m != nil {
		return m.WithdrawAvailable
	}
	return 0
}

func (m *TradingAccountSummary) GetReserve() float64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *TradingAccountSummary) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *TradingAccountSummary) GetCredit() float64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *TradingAccountSummary) GetMortgate() float64 {
	if m != nil {
		return m.Mortgate
	}
	return 0
}

func (m *TradingAccountSummary) GetExchangeMargin() float64 {
	if m != nil {
		return m.ExchangeMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetDeliveryMargin() float64 {
	if m != nil {
		return m.DeliveryMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetExchangeDeliveryMargin() float64 {
	if m != nil {
		return m.ExchangeDeliveryMargin
	}
	return 0
}

func (m *TradingAccountSummary) GetReserveBalance() float64 {
	if m != nil {
		return m.ReserveBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetDeliveryCommission() float64 {
	if m != nil {
		return m.DeliveryCommission
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenTransferFee() float64 {
	if m != nil {
		return m.FrozenTransferFee
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenStampTax() float64 {
	if m != nil {
		return m.FrozenStampTax
	}
	return 0
}

func (m *TradingAccountSummary) GetTransferFee() float64 {
	if m != nil {
		return m.TransferFee
	}
	return 0
}

func (m *TradingAccountSummary) GetStampTax() float64 {
	if m != nil {
		return m.StampTax
	}
	return 0
}

func (m *TradingAccountSummary) GetMtmProfit() float64 {
	if m != nil {
		return m.MtmProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetMtmBalance() float64 {
	if m != nil {
		return m.MtmBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetStockValue() float64 {
	if m != nil {
		return m.StockValue
	}
	return 0
}

func (m *TradingAccountSummary) GetBondRepurchaseAmount() float64 {
	if m != nil {
		return m.BondRepurchaseAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetReverseRepurchaseAmount() float64 {
	if m != nil {
		return m.ReverseRepurchaseAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetMarginTradeAmount() float64 {
	if m != nil {
		return m.MarginTradeAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetShortSellAmount() float64 {
	if m != nil {
		return m.ShortSellAmount
	}
	return 0
}

func (m *TradingAccountSummary) GetMarginTradeProfit() float64 {
	if m != nil {
		return m.MarginTradeProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetPrePreferedBalance() float64 {
	if m != nil {
		return m.PrePreferedBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenCloseCommission() float64 {
	if m != nil {
		return m.FrozenCloseCommission
	}
	return 0
}

func (m *TradingAccountSummary) GetCommonBalance() float64 {
	if m != nil {
		return m.CommonBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetPreferedBalance() float64 {
	if m != nil {
		return m.PreferedBalance
	}
	return 0
}

func (m *TradingAccountSummary) GetBaseExchangeRate() float64 {
	if m != nil {
		return m.BaseExchangeRate
	}
	return 0
}

func (m *TradingAccountSummary) GetWarningLevel() float64 {
	if m != nil {
		return m.WarningLevel
	}
	return 0
}

func (m *TradingAccountSummary) GetForceCloseLevel() float64 {
	if m != nil {
		return m.ForceCloseLevel
	}
	return 0
}

func (m *TradingAccountSummary) GetClearedClosedProfit() float64 {
	if m != nil {
		return m.ClearedClosedProfit
	}
	return 0
}

func (m *TradingAccountSummary) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *TradingAccountSummary) GetInterest() float64 {
	if m != nil {
		return m.Interest
	}
	return 0
}

func (m *TradingAccountSummary) GetFrozenInterest() float64 {
	if m != nil {
		return m.FrozenInterest
	}
	return 0
}

func (m *TradingAccountSummary) GetOptionsId() int64 {
	if m != nil {
		return m.OptionsId
	}
	return 0
}

func (m *TradingAccountSummary) GetOptionsName() string {
	if m != nil {
		return m.OptionsName
	}
	return ""
}

func (m *TradingAccountSummary) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *TradingAccountSummary) GetOvernightFee() float64 {
	if m != nil {
		return m.OvernightFee
	}
	return 0
}

func (m *TradingAccountSummary) GetCommissionL0() float64 {
	if m != nil {
		return m.CommissionL0
	}
	return 0
}

func (m *TradingAccountSummary) GetLongPositionMarketValue() float64 {
	if m != nil {
		return m.LongPositionMarketValue
	}
	return 0
}

func (m *TradingAccountSummary) GetShortPositionMarketValue() float64 {
	if m != nil {
		return m.ShortPositionMarketValue
	}
	return 0
}

func (m *TradingAccountSummary) GetPreferedDeposit() float64 {
	if m != nil {
		return m.PreferedDeposit
	}
	return 0
}

func (m *TradingAccountSummary) GetCommonDeposit() float64 {
	if m != nil {
		return m.CommonDeposit
	}
	return 0
}

func (m *TradingAccountSummary) GetPreferedWithdraw() float64 {
	if m != nil {
		return m.PreferedWithdraw
	}
	return 0
}

func (m *TradingAccountSummary) GetCommonWithdraw() float64 {
	if m != nil {
		return m.CommonWithdraw
	}
	return 0
}

func (m *TradingAccountSummary) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *TradingAccountSummary) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

type RspTradingAccountLogin struct {
	ErrorId              int32    `protobuf:"varint,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	ErrorMsg             []byte   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	RequestId            int32    `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	IsLast               bool     `protobuf:"varint,4,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	TradingDay           int32    `protobuf:"varint,5,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	LoginTime            string   `protobuf:"bytes,6,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	BrokerId             string   `protobuf:"bytes,7,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	UserId               string   `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SystemName           string   `protobuf:"bytes,9,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	FrontId              int32    `protobuf:"varint,10,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`
	SessionId            int32    `protobuf:"varint,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	MaxOrderRef          string   `protobuf:"bytes,12,opt,name=max_order_ref,json=maxOrderRef,proto3" json:"max_order_ref,omitempty"`
	SHFETime             string   `protobuf:"bytes,13,opt,name=SHFE_time,json=SHFETime,proto3" json:"SHFE_time,omitempty"`
	DCETime              string   `protobuf:"bytes,14,opt,name=DCE_time,json=DCETime,proto3" json:"DCE_time,omitempty"`
	CZCETime             string   `protobuf:"bytes,15,opt,name=CZCE_time,json=CZCETime,proto3" json:"CZCE_time,omitempty"`
	FFEXTime             string   `protobuf:"bytes,16,opt,name=FFEX_time,json=FFEXTime,proto3" json:"FFEX_time,omitempty"`
	INETime              string   `protobuf:"bytes,17,opt,name=INE_time,json=INETime,proto3" json:"INE_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspTradingAccountLogin) Reset()         { *m = RspTradingAccountLogin{} }
func (m *RspTradingAccountLogin) String() string { return proto.CompactTextString(m) }
func (*RspTradingAccountLogin) ProtoMessage()    {}
func (*RspTradingAccountLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{5}
}

func (m *RspTradingAccountLogin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspTradingAccountLogin.Unmarshal(m, b)
}
func (m *RspTradingAccountLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspTradingAccountLogin.Marshal(b, m, deterministic)
}
func (m *RspTradingAccountLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspTradingAccountLogin.Merge(m, src)
}
func (m *RspTradingAccountLogin) XXX_Size() int {
	return xxx_messageInfo_RspTradingAccountLogin.Size(m)
}
func (m *RspTradingAccountLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_RspTradingAccountLogin.DiscardUnknown(m)
}

var xxx_messageInfo_RspTradingAccountLogin proto.InternalMessageInfo

func (m *RspTradingAccountLogin) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *RspTradingAccountLogin) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *RspTradingAccountLogin) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *RspTradingAccountLogin) GetLoginTime() string {
	if m != nil {
		return m.LoginTime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *RspTradingAccountLogin) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RspTradingAccountLogin) GetSystemName() string {
	if m != nil {
		return m.SystemName
	}
	return ""
}

func (m *RspTradingAccountLogin) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *RspTradingAccountLogin) GetMaxOrderRef() string {
	if m != nil {
		return m.MaxOrderRef
	}
	return ""
}

func (m *RspTradingAccountLogin) GetSHFETime() string {
	if m != nil {
		return m.SHFETime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetDCETime() string {
	if m != nil {
		return m.DCETime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetCZCETime() string {
	if m != nil {
		return m.CZCETime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetFFEXTime() string {
	if m != nil {
		return m.FFEXTime
	}
	return ""
}

func (m *RspTradingAccountLogin) GetINETime() string {
	if m != nil {
		return m.INETime
	}
	return ""
}

type RspOrderInsert struct {
	ErrorId              int32    `protobuf:"varint,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	ErrorMsg             []byte   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	OrderRef             string   `protobuf:"bytes,3,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspOrderInsert) Reset()         { *m = RspOrderInsert{} }
func (m *RspOrderInsert) String() string { return proto.CompactTextString(m) }
func (*RspOrderInsert) ProtoMessage()    {}
func (*RspOrderInsert) Descriptor() ([]byte, []int) {
	return fileDescriptor_102317da1eced062, []int{6}
}

func (m *RspOrderInsert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspOrderInsert.Unmarshal(m, b)
}
func (m *RspOrderInsert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspOrderInsert.Marshal(b, m, deterministic)
}
func (m *RspOrderInsert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspOrderInsert.Merge(m, src)
}
func (m *RspOrderInsert) XXX_Size() int {
	return xxx_messageInfo_RspOrderInsert.Size(m)
}
func (m *RspOrderInsert) XXX_DiscardUnknown() {
	xxx_messageInfo_RspOrderInsert.DiscardUnknown(m)
}

var xxx_messageInfo_RspOrderInsert proto.InternalMessageInfo

func (m *RspOrderInsert) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *RspOrderInsert) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *RspOrderInsert) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

func init() {
	proto.RegisterEnum("goshare.RouteType", RouteType_name, RouteType_value)
	proto.RegisterType((*TradingRoute)(nil), "goshare.TradingRoute")
	proto.RegisterType((*TradingRouteList)(nil), "goshare.TradingRouteList")
	proto.RegisterType((*TradingAccount)(nil), "goshare.TradingAccount")
	proto.RegisterType((*TradingAccountList)(nil), "goshare.TradingAccountList")
	proto.RegisterType((*TradingAccountSummary)(nil), "goshare.TradingAccountSummary")
	proto.RegisterType((*RspTradingAccountLogin)(nil), "goshare.RspTradingAccountLogin")
	proto.RegisterType((*RspOrderInsert)(nil), "goshare.RspOrderInsert")
}

func init() { proto.RegisterFile("trading.proto", fileDescriptor_102317da1eced062) }

var fileDescriptor_102317da1eced062 = []byte{
	// 1888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdb, 0x72, 0x1b, 0xb9,
	0x11, 0x0d, 0x75, 0x23, 0xd9, 0xd4, 0x85, 0x02, 0x2d, 0x69, 0x64, 0x59, 0x6b, 0x59, 0xce, 0x46,
	0xf2, 0x4d, 0xf2, 0xca, 0x8e, 0xb3, 0xf1, 0xc6, 0x49, 0x64, 0x4a, 0xaa, 0x65, 0x59, 0xb7, 0x1a,
	0x72, 0x37, 0xa9, 0x7d, 0x99, 0x82, 0x66, 0x40, 0x72, 0xca, 0x73, 0x0b, 0x06, 0xa4, 0xa5, 0x7c,
	0xc2, 0x7e, 0x48, 0xbe, 0x2a, 0x0f, 0xf9, 0x94, 0x14, 0xba, 0x81, 0xe1, 0x48, 0xf6, 0xbe, 0xf8,
	0x8d, 0x38, 0xe7, 0x34, 0xa6, 0xd1, 0xdd, 0x00, 0x1a, 0x84, 0x05, 0x25, 0x79, 0x10, 0x26, 0x83,
	0xbd, 0x4c, 0xa6, 0x2a, 0x65, 0xd5, 0x41, 0x9a, 0x0f, 0xb9, 0x14, 0xdb, 0xff, 0x9d, 0x82, 0xf9,
	0x1e, 0x51, 0x6e, 0x3a, 0x52, 0x82, 0x2d, 0xc2, 0x54, 0x18, 0x38, 0x95, 0xad, 0xca, 0xee, 0xb4,
	0x3b, 0x15, 0x06, 0x8c, 0xc1, 0x4c, 0xc2, 0x63, 0xe1, 0x4c, 0x6d, 0x55, 0x76, 0xeb, 0x2e, 0xfe,
	0x66, 0x0e, 0x54, 0xfd, 0x34, 0x8e, 0x45, 0xa2, 0x9c, 0x69, 0x84, 0xed, 0x90, 0x6d, 0x40, 0xfd,
	0x4a, 0xa6, 0x1f, 0x85, 0xf4, 0xc2, 0xc0, 0x99, 0x41, 0xae, 0x46, 0x40, 0x27, 0x60, 0xdf, 0x01,
	0x48, 0xfd, 0x0d, 0x4f, 0xdd, 0x64, 0xc2, 0x99, 0xdd, 0xaa, 0xec, 0x2e, 0x1e, 0xb0, 0x3d, 0xe3,
	0xc9, 0x1e, 0x7e, 0xbe, 0x77, 0x93, 0x09, 0xb7, 0x2e, 0xed, 0x4f, 0xf6, 0x1c, 0x98, 0x71, 0xdc,
	0xeb, 0xcb, 0x34, 0x51, 0x5e, 0x14, 0xe6, 0xca, 0x99, 0xdb, 0x9a, 0xde, 0xad, 0xbb, 0x4d, 0xc3,
	0x9c, 0x68, 0xe2, 0x34, 0xcc, 0x15, 0x7b, 0x05, 0xab, 0x31, 0x97, 0x1f, 0x85, 0xf2, 0x02, 0xae,
	0x78, 0xd9, 0xa2, 0x8a, 0x16, 0x2d, 0x62, 0x8f, 0xb8, 0xe2, 0x13, 0xa3, 0xa7, 0xb0, 0x3c, 0xca,
	0x85, 0xf4, 0x32, 0x99, 0x06, 0x23, 0x5f, 0x79, 0x61, 0xd2, 0x4f, 0x9d, 0x1a, 0xba, 0xbe, 0xa4,
	0x89, 0x4b, 0xc2, 0x3b, 0x49, 0x3f, 0xd5, 0xcb, 0xe3, 0x23, 0x35, 0xf4, 0xfc, 0x34, 0x10, 0x4e,
	0x9d, 0x96, 0xa7, 0x81, 0x76, 0x1a, 0x08, 0x1d, 0x29, 0xad, 0x77, 0x80, 0x22, 0xa5, 0x7f, 0x6f,
	0xbf, 0x83, 0x66, 0x39, 0xba, 0xf8, 0xc1, 0x27, 0x30, 0x83, 0x3e, 0x55, 0xb6, 0xa6, 0x77, 0x1b,
	0x07, 0x2b, 0x45, 0x00, 0xca, 0x42, 0x17, 0x25, 0xdb, 0xff, 0x99, 0x86, 0x45, 0x03, 0x1f, 0xfa,
	0x7e, 0x3a, 0x4a, 0x54, 0x29, 0x3f, 0xf5, 0xaf, 0xc8, 0xcf, 0xdb, 0xa2, 0x10, 0x3c, 0x0c, 0x32,
	0xe6, 0xe8, 0x37, 0x9d, 0x98, 0x57, 0xe5, 0xca, 0x70, 0xa0, 0xca, 0xc9, 0x09, 0xcc, 0x5d, 0xdd,
	0xb5, 0x43, 0x76, 0x1f, 0x6a, 0x19, 0xcf, 0xf3, 0x4f, 0xa9, 0x0c, 0x9c, 0x39, 0x8a, 0x8a, 0x1d,
	0xb3, 0x07, 0x50, 0xb7, 0xbf, 0x0f, 0x9c, 0x2a, 0x92, 0x13, 0xa0, 0xcc, 0xbe, 0x32, 0x41, 0x9f,
	0x00, 0xec, 0x00, 0x56, 0x32, 0x29, 0xc6, 0x22, 0x51, 0x5e, 0x2e, 0xa2, 0xbe, 0x17, 0x73, 0xe5,
	0x0f, 0xc3, 0x64, 0x80, 0xa1, 0xaf, 0xb9, 0x2d, 0x43, 0x76, 0x45, 0xd4, 0x3f, 0x33, 0x14, 0x7b,
	0x07, 0x1b, 0xb9, 0x4a, 0xfd, 0x8f, 0x5e, 0x9a, 0xa9, 0x30, 0x4d, 0xbc, 0x2c, 0xcd, 0x43, 0xfc,
	0x11, 0x85, 0x71, 0xa8, 0x30, 0x39, 0xb3, 0xae, 0x83, 0x92, 0x0b, 0x54, 0x5c, 0x1a, 0xc1, 0xa9,
	0xe6, 0xd9, 0x23, 0x98, 0xf7, 0x79, 0xe2, 0x8b, 0xc8, 0xe8, 0x1b, 0xa8, 0x6f, 0x10, 0x46, 0x12,
	0x9b, 0xe7, 0xf9, 0x52, 0x9e, 0x0f, 0x81, 0xdd, 0xce, 0x13, 0x66, 0xfa, 0xd9, 0xad, 0x4c, 0xaf,
	0xdd, 0x0d, 0xb2, 0x91, 0x9a, 0x5c, 0xff, 0xaf, 0x05, 0x2b, 0xb7, 0x89, 0xee, 0x28, 0x8e, 0xb9,
	0xbc, 0x29, 0x07, 0xbe, 0x72, 0x3b, 0xf0, 0xd6, 0x95, 0xa9, 0x89, 0x2b, 0x3a, 0x19, 0xfe, 0x48,
	0x4a, 0x91, 0xf8, 0x37, 0x26, 0xfb, 0xc5, 0x58, 0xcf, 0x74, 0xc5, 0x23, 0xbd, 0x16, 0x4c, 0x7c,
	0xc5, 0xb5, 0x43, 0xf6, 0x0d, 0x80, 0xae, 0x91, 0x30, 0xcf, 0xc3, 0x34, 0xc1, 0xfc, 0x56, 0xdc,
	0x12, 0xc2, 0x36, 0x01, 0xfc, 0x91, 0xf4, 0x62, 0x2e, 0x07, 0x61, 0x82, 0x49, 0xae, 0xb8, 0x75,
	0x7f, 0x24, 0xcf, 0x10, 0x60, 0x7b, 0xd0, 0x4a, 0x84, 0x9a, 0x04, 0x9b, 0xc7, 0xe8, 0x6e, 0x15,
	0x75, 0xcb, 0x89, 0x50, 0x36, 0xca, 0x87, 0x48, 0xb0, 0x87, 0xd0, 0xc8, 0xa4, 0xf0, 0xac, 0x33,
	0x35, 0xfa, 0x5e, 0x26, 0xc5, 0x7b, 0xe3, 0xcf, 0x43, 0x68, 0x84, 0x89, 0x12, 0x52, 0xe4, 0x7a,
	0x47, 0x62, 0xc2, 0x2b, 0x2e, 0x58, 0xa8, 0x93, 0xe8, 0xa5, 0x04, 0x02, 0xbf, 0x87, 0x39, 0xad,
	0xb8, 0x76, 0xa8, 0x03, 0xf0, 0x29, 0x54, 0xc3, 0x40, 0xf2, 0x4f, 0x98, 0xbe, 0x8a, 0x5b, 0x8c,
	0xd9, 0x63, 0x58, 0xe8, 0xcb, 0xf4, 0xdf, 0x22, 0xb1, 0x2b, 0x99, 0x47, 0xc1, 0x3c, 0x81, 0x66,
	0x31, 0xcf, 0x60, 0xd9, 0x88, 0x4a, 0x21, 0x59, 0x40, 0x61, 0x93, 0x88, 0xf6, 0x24, 0x30, 0x0f,
	0xa0, 0xce, 0xc7, 0x3c, 0x8c, 0xf8, 0x55, 0x24, 0x9c, 0x45, 0x8a, 0x4b, 0x01, 0x60, 0x39, 0x45,
	0x69, 0x2e, 0xf4, 0xe9, 0xd2, 0x0f, 0x95, 0xb3, 0x84, 0x82, 0x06, 0x62, 0x97, 0x08, 0xb1, 0x1d,
	0x58, 0x2a, 0xc2, 0x66, 0x54, 0x4d, 0x54, 0x2d, 0x5a, 0xd8, 0x08, 0x1f, 0xc1, 0xbc, 0x8e, 0x59,
	0x9c, 0x4a, 0x35, 0xe0, 0x4a, 0x38, 0xcb, 0x34, 0x57, 0x26, 0xc5, 0x99, 0x81, 0x74, 0x96, 0xb4,
	0xc4, 0x97, 0x22, 0x08, 0x95, 0xc3, 0xc8, 0x9b, 0x4c, 0x8a, 0x36, 0x02, 0x7a, 0xf5, 0x45, 0x50,
	0xaf, 0x78, 0x2e, 0x9c, 0x16, 0xad, 0xde, 0x82, 0xef, 0x79, 0x2e, 0xd8, 0x0b, 0x60, 0x36, 0x5c,
	0xde, 0x64, 0x65, 0xf7, 0x28, 0x93, 0x96, 0x39, 0x2c, 0x56, 0xe8, 0x40, 0x55, 0x8a, 0x5c, 0xc8,
	0xb1, 0x70, 0x56, 0x28, 0x0f, 0x66, 0xa8, 0x53, 0x68, 0xcf, 0x9a, 0x80, 0xdf, 0x38, 0xab, 0xb8,
	0x93, 0xc0, 0x40, 0x47, 0xfc, 0x86, 0xad, 0xc2, 0x9c, 0xf1, 0x74, 0x0d, 0x2d, 0xcd, 0x48, 0x27,
	0xb0, 0x58, 0xa4, 0x43, 0x09, 0xb4, 0x63, 0x1d, 0x2d, 0x71, 0xed, 0x0f, 0x79, 0x32, 0x10, 0x36,
	0x85, 0xeb, 0x14, 0x2d, 0x0b, 0x9b, 0x24, 0xee, 0xc0, 0x52, 0x20, 0xa2, 0x70, 0x2c, 0xe4, 0x8d,
	0x15, 0xde, 0x27, 0xa1, 0x85, 0x8d, 0xf0, 0x7b, 0x70, 0x8a, 0x19, 0xef, 0x5a, 0x6c, 0xa0, 0xc5,
	0xaa, 0xe5, 0x8f, 0x6e, 0x5b, 0xee, 0xc0, 0x92, 0x59, 0x6b, 0x51, 0xc8, 0x0f, 0xe8, 0x13, 0x06,
	0xb6, 0xc5, 0xbc, 0x0f, 0xad, 0x62, 0xe6, 0x52, 0x49, 0x6d, 0xa2, 0x98, 0x59, 0xaa, 0x54, 0x54,
	0x7b, 0xd0, 0x32, 0x15, 0xa8, 0x24, 0x4f, 0xf2, 0xbe, 0x90, 0x5e, 0x5f, 0x08, 0xe7, 0x1b, 0x4a,
	0x02, 0x51, 0x3d, 0xc3, 0x9c, 0x08, 0xc1, 0x76, 0xc1, 0x14, 0xa6, 0x97, 0x2b, 0x1e, 0x67, 0x9e,
	0xe2, 0xd7, 0xce, 0x43, 0x72, 0x85, 0xf0, 0xae, 0x86, 0x7b, 0xfc, 0x5a, 0x17, 0xd1, 0xad, 0x29,
	0xb7, 0xa8, 0x88, 0x54, 0x69, 0xb2, 0x0d, 0xa8, 0x4f, 0x66, 0x79, 0x44, 0xf1, 0xcf, 0xad, 0xfd,
	0x26, 0x40, 0xac, 0x62, 0x5b, 0xa8, 0xdb, 0x54, 0x61, 0xb1, 0x8a, 0x4d, 0x8d, 0x3e, 0x84, 0x86,
	0xa6, 0x6d, 0x38, 0x1e, 0xd3, 0xb6, 0x8d, 0x55, 0x5c, 0xda, 0xd7, 0x74, 0x3c, 0x8f, 0x79, 0x34,
	0x12, 0xce, 0xef, 0x49, 0x80, 0xd0, 0xcf, 0x1a, 0x61, 0xaf, 0x61, 0xf5, 0x2a, 0x4d, 0x02, 0x4f,
	0x8a, 0x6c, 0x24, 0xfd, 0x21, 0xcf, 0x85, 0x3d, 0x4c, 0xbe, 0x45, 0xed, 0x3d, 0xcd, 0xba, 0x05,
	0x69, 0xce, 0x93, 0xb7, 0xb0, 0xae, 0xef, 0x02, 0x99, 0x8b, 0x2f, 0x18, 0xfe, 0x01, 0x0d, 0xd7,
	0x8c, 0xe0, 0x33, 0xdb, 0x3d, 0x68, 0x51, 0xba, 0x75, 0xb0, 0x83, 0xc2, 0x6a, 0x87, 0x82, 0x4d,
	0x94, 0x3e, 0x98, 0xad, 0xfe, 0x29, 0x2c, 0xe7, 0xc3, 0x54, 0xe2, 0x9d, 0x14, 0x59, 0xf5, 0x2e,
	0xaa, 0x97, 0x90, 0xe8, 0x8a, 0x28, 0xfa, 0x8d, 0xb9, 0x4d, 0xdc, 0x9e, 0x7c, 0x36, 0xb7, 0x89,
	0xdf, 0x4b, 0xb8, 0xa7, 0x37, 0x70, 0x26, 0x45, 0x5f, 0x48, 0x11, 0x14, 0x81, 0x7c, 0x4a, 0xa5,
	0x92, 0x49, 0x71, 0x69, 0x28, 0x1b, 0xd0, 0x37, 0xb0, 0x66, 0x0f, 0x2b, 0x3c, 0x68, 0x4a, 0xf5,
	0xf5, 0x0c, 0x8d, 0x56, 0xcc, 0x91, 0xa5, 0xd9, 0x52, 0x89, 0x7d, 0x0b, 0x8b, 0x5a, 0x9a, 0x26,
	0xc5, 0x37, 0x9e, 0xa3, 0x7c, 0x81, 0x50, 0x3b, 0xfd, 0x13, 0x68, 0x7e, 0xe6, 0xcc, 0x0b, 0x5a,
	0x6b, 0x76, 0xc7, 0x93, 0xe7, 0xc0, 0xf4, 0xa1, 0xe2, 0x15, 0xbb, 0x49, 0xea, 0x0d, 0xbc, 0x47,
	0xe7, 0xa6, 0x66, 0x8e, 0x0d, 0xe1, 0xea, 0x8d, 0xfc, 0x18, 0x16, 0x3e, 0x71, 0x99, 0xe8, 0xd3,
	0x21, 0x12, 0x63, 0x11, 0x39, 0xfb, 0x74, 0x16, 0x19, 0xf0, 0x54, 0x63, 0x3a, 0xd4, 0xfd, 0x54,
	0xfa, 0xc2, 0xac, 0x8d, 0x84, 0x2f, 0xe9, 0xf3, 0x48, 0xe0, 0xaa, 0x48, 0x7b, 0x00, 0x2b, 0x7e,
	0x24, 0xb8, 0x76, 0x14, 0xd5, 0x81, 0x0d, 0xf6, 0x77, 0xa8, 0x6f, 0x19, 0x12, 0x2d, 0x82, 0xc9,
	0x91, 0x6a, 0xae, 0x52, 0x0f, 0x9b, 0xa8, 0x03, 0xbc, 0x2f, 0x1b, 0x06, 0x3b, 0xd7, 0xbd, 0xd4,
	0x7d, 0xa8, 0xd9, 0xe3, 0xd1, 0x79, 0x45, 0x9b, 0xc1, 0x8e, 0xf5, 0x01, 0x60, 0x62, 0x5f, 0x48,
	0x5e, 0x97, 0x77, 0x5d, 0xc7, 0x0a, 0x37, 0x01, 0xa8, 0x1d, 0xc9, 0x75, 0x5f, 0xfc, 0x47, 0x6c,
	0xae, 0xeb, 0x06, 0xe9, 0x04, 0xda, 0x0d, 0x4b, 0xa3, 0x1b, 0x6f, 0xc8, 0x0d, 0x83, 0xa1, 0x1b,
	0xfa, 0x9a, 0xf1, 0x55, 0x38, 0xe6, 0x4a, 0x04, 0xce, 0x9f, 0xb0, 0xfd, 0x99, 0x00, 0x3a, 0x98,
	0xe9, 0x58, 0xc8, 0x24, 0x1c, 0x0c, 0x15, 0x6e, 0xeb, 0xef, 0x29, 0x98, 0x05, 0xa8, 0xf7, 0xf5,
	0x63, 0x58, 0x98, 0x14, 0x87, 0x17, 0xbd, 0x74, 0xfe, 0x4c, 0xa2, 0x09, 0x78, 0xfa, 0x92, 0xfd,
	0x00, 0xf7, 0xa3, 0x34, 0x19, 0x4c, 0x6e, 0x72, 0xd3, 0x50, 0xd3, 0x76, 0x7d, 0x4b, 0x3b, 0x49,
	0x2b, 0xec, 0x85, 0x7e, 0x86, 0x3c, 0xed, 0x5d, 0xdd, 0x7b, 0xe1, 0xce, 0xf8, 0xb2, 0xf5, 0x0f,
	0x68, 0xed, 0xa0, 0xe4, 0x4b, 0xe6, 0xe5, 0x5a, 0xb3, 0x77, 0xfb, 0x5f, 0x6e, 0xd7, 0xda, 0x91,
	0xb9, 0xe3, 0x27, 0xd5, 0x6b, 0x85, 0xef, 0xca, 0xd5, 0x6b, 0x65, 0xcf, 0x60, 0xb9, 0x98, 0xb1,
	0xe8, 0x09, 0xfe, 0x4a, 0x15, 0x69, 0x89, 0x7f, 0xd8, 0xde, 0x60, 0x07, 0x96, 0xcc, 0x9c, 0x85,
	0xf4, 0x6f, 0x94, 0x4d, 0x82, 0x0b, 0xe1, 0x2a, 0xcc, 0x5d, 0x49, 0x9e, 0xf8, 0x43, 0xe7, 0xef,
	0x98, 0x28, 0x33, 0xd2, 0x67, 0x1b, 0xfd, 0xa2, 0x2c, 0x1e, 0x22, 0x09, 0x04, 0xe9, 0x24, 0x6e,
	0xff, 0x3a, 0x03, 0xab, 0x6e, 0x9e, 0xdd, 0xe9, 0x14, 0x53, 0x7d, 0x97, 0xac, 0x43, 0x4d, 0x48,
	0x99, 0xe2, 0xbb, 0xa9, 0x82, 0x37, 0x65, 0x15, 0xc7, 0x9d, 0x40, 0x9f, 0xc7, 0x44, 0xc5, 0xf9,
	0x00, 0x3b, 0xbd, 0x79, 0x97, 0xb4, 0x67, 0xf9, 0x40, 0x57, 0x96, 0x14, 0xff, 0x1a, 0x61, 0x9b,
	0x14, 0x60, 0xbf, 0x37, 0xeb, 0xd6, 0x0d, 0xd2, 0x09, 0xd8, 0x1a, 0x54, 0xc3, 0xdc, 0x8b, 0x78,
	0xae, 0xb0, 0xe1, 0xab, 0xb9, 0x73, 0x61, 0x7e, 0xca, 0x73, 0x75, 0xf7, 0x72, 0x9e, 0xfd, 0xec,
	0x72, 0xde, 0x04, 0x88, 0x52, 0x3c, 0xb8, 0xc2, 0x58, 0x98, 0xae, 0xbe, 0x8e, 0x48, 0x2f, 0x8c,
	0xc5, 0xed, 0x87, 0x5e, 0xf5, 0xce, 0x43, 0x6f, 0x0d, 0xaa, 0xf8, 0xa4, 0x0a, 0x03, 0xd3, 0xd3,
	0xcf, 0xe9, 0x61, 0x27, 0xc0, 0xd3, 0xff, 0x26, 0x57, 0x22, 0xa6, 0x08, 0xd1, 0x0b, 0x0a, 0x08,
	0xc2, 0x32, 0x5f, 0x87, 0x1a, 0xbd, 0xda, 0xc2, 0xc0, 0xb4, 0xea, 0x55, 0x1c, 0x77, 0x02, 0xed,
	0x50, 0x2e, 0xa8, 0x76, 0xc3, 0xc0, 0xf4, 0xe5, 0x75, 0x83, 0x74, 0x02, 0xb6, 0x0d, 0x0b, 0x31,
	0xbf, 0xf6, 0x52, 0x19, 0x08, 0xe9, 0x49, 0xd1, 0x37, 0xed, 0x79, 0x23, 0xe6, 0xd7, 0x17, 0x1a,
	0x73, 0x45, 0x5f, 0x3b, 0xdd, 0xfd, 0xf1, 0xe4, 0x98, 0x96, 0xb4, 0x40, 0x4e, 0x6b, 0x00, 0x57,
	0xb4, 0x0e, 0xb5, 0xa3, 0xb6, 0xe1, 0x16, 0xa9, 0xcd, 0x3e, 0x6a, 0x1f, 0xdb, 0xc5, 0xb6, 0x7f,
	0xb1, 0xdc, 0x12, 0xd9, 0x69, 0xc0, 0x92, 0x27, 0x27, 0xc7, 0xff, 0x24, 0xb2, 0x49, 0xa4, 0x06,
	0xec, 0xa4, 0x9d, 0x73, 0x63, 0xb8, 0x4c, 0x93, 0x76, 0xce, 0xd1, 0x6e, 0x5b, 0xc0, 0xa2, 0x9b,
	0x67, 0xe8, 0x5b, 0x27, 0xc9, 0x85, 0x54, 0x5f, 0x5d, 0x03, 0x1b, 0x50, 0x9f, 0x2c, 0xdb, 0xb4,
	0xfc, 0xa9, 0x59, 0xf3, 0xd3, 0x5f, 0x2b, 0x50, 0x2f, 0x9e, 0xd6, 0x6c, 0x19, 0x16, 0xdc, 0x9e,
	0xd7, 0xee, 0x5d, 0x7a, 0x27, 0x3f, 0xf5, 0x7e, 0x72, 0x8f, 0x9b, 0xbf, 0x63, 0x4d, 0x98, 0x37,
	0x50, 0xb7, 0x77, 0xd1, 0xfe, 0xd0, 0xac, 0xb0, 0x75, 0x58, 0x71, 0x7b, 0x5e, 0xe7, 0xbc, 0x77,
	0xec, 0x1e, 0xb6, 0x7b, 0x9d, 0x9f, 0x8f, 0xbd, 0xf7, 0xee, 0xc5, 0x87, 0x63, 0xb7, 0x39, 0xc5,
	0x00, 0xe6, 0xdc, 0x9e, 0x77, 0xda, 0xeb, 0x36, 0xa7, 0x59, 0x03, 0xaa, 0xda, 0xf0, 0xb0, 0xd7,
	0x6d, 0xce, 0xb0, 0x35, 0x68, 0x95, 0x67, 0xf1, 0x2e, 0x2e, 0x7b, 0x9d, 0x8b, 0xf3, 0xe6, 0xac,
	0x51, 0x7d, 0xe8, 0x5e, 0x5c, 0x36, 0xab, 0xef, 0xdf, 0xfc, 0xf2, 0x7a, 0x10, 0xaa, 0xe1, 0xe8,
	0x6a, 0xcf, 0x4f, 0xe3, 0x7d, 0x97, 0x8f, 0x45, 0xf2, 0xe3, 0x28, 0xdd, 0x1f, 0xa4, 0x2f, 0xf0,
	0x6f, 0x89, 0x7d, 0xec, 0x03, 0xcc, 0xef, 0xec, 0xe3, 0x60, 0xdf, 0x3c, 0x98, 0xae, 0xe6, 0x10,
	0x7a, 0xf5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0x08, 0xf5, 0xed, 0xc6, 0x10, 0x00, 0x00,
}
