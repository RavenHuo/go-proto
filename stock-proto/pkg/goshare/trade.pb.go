// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trade.proto

package goshare

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 成交类型
type TradeType int32

const (
	// 普通成交
	TradeType_TT_NORMAL TradeType = 0
	// 期权执行
	TradeType_TT_OPTIONS_EXECUTION TradeType = 1
	// OTC成交
	TradeType_TT_OTC TradeType = 2
	// 期转现衍生成交
	TradeType_TT_EFP_DERIVED TradeType = 3
	// 组合衍生成交
	TradeType_TT_COMBINATION_DERIVED TradeType = 4
	// 交割平仓
	TradeType_TT_DELIVERY_CLOSE TradeType = 5
	// 结算衍生
	TradeType_TT_SETTLEMENT_DERIVED TradeType = 6
	// 分红股票
	TradeType_TT_PLACEMENT_DERIVED TradeType = 7
	// 回购
	TradeType_TT_REPURCHASE TradeType = 8
)

var TradeType_name = map[int32]string{
	0: "TT_NORMAL",
	1: "TT_OPTIONS_EXECUTION",
	2: "TT_OTC",
	3: "TT_EFP_DERIVED",
	4: "TT_COMBINATION_DERIVED",
	5: "TT_DELIVERY_CLOSE",
	6: "TT_SETTLEMENT_DERIVED",
	7: "TT_PLACEMENT_DERIVED",
	8: "TT_REPURCHASE",
}

var TradeType_value = map[string]int32{
	"TT_NORMAL":              0,
	"TT_OPTIONS_EXECUTION":   1,
	"TT_OTC":                 2,
	"TT_EFP_DERIVED":         3,
	"TT_COMBINATION_DERIVED": 4,
	"TT_DELIVERY_CLOSE":      5,
	"TT_SETTLEMENT_DERIVED":  6,
	"TT_PLACEMENT_DERIVED":   7,
	"TT_REPURCHASE":          8,
}

func (x TradeType) String() string {
	return proto.EnumName(TradeType_name, int32(x))
}

func (TradeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee944bd90e8a0312, []int{0}
}

// 成交
type Trade struct {
	Exchange             string        `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol               string        `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Product              string        `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Direction            DirectionType `protobuf:"varint,5,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`
	Offset               int32         `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Price                float64       `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Volume               int32         `protobuf:"varint,8,opt,name=volume,proto3" json:"volume,omitempty"`
	UserId               string        `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TaId                 string        `protobuf:"bytes,10,opt,name=ta_id,json=taId,proto3" json:"ta_id,omitempty"`
	BuId                 string        `protobuf:"bytes,11,opt,name=bu_id,json=buId,proto3" json:"bu_id,omitempty"`
	TradeId              string        `protobuf:"bytes,12,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TradedTime           int64         `protobuf:"varint,13,opt,name=traded_time,json=tradedTime,proto3" json:"traded_time,omitempty"`
	TradedTradingDay     int32         `protobuf:"varint,14,opt,name=traded_trading_day,json=tradedTradingDay,proto3" json:"traded_trading_day,omitempty"`
	FrontId              int32         `protobuf:"varint,15,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`
	SessionId            int32         `protobuf:"varint,16,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OrderRef             string        `protobuf:"bytes,17,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`
	UserName             string        `protobuf:"bytes,18,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Branch               string        `protobuf:"bytes,19,opt,name=branch,proto3" json:"branch,omitempty"`
	BranchName           string        `protobuf:"bytes,20,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	TradeType            int32         `protobuf:"varint,21,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ExchangeOrderId      string        `protobuf:"bytes,22,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee944bd90e8a0312, []int{0}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Trade) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Trade) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Trade) GetDirection() DirectionType {
	if m != nil {
		return m.Direction
	}
	return DirectionType_LONG
}

func (m *Trade) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Trade) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Trade) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Trade) GetTaId() string {
	if m != nil {
		return m.TaId
	}
	return ""
}

func (m *Trade) GetBuId() string {
	if m != nil {
		return m.BuId
	}
	return ""
}

func (m *Trade) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

func (m *Trade) GetTradedTime() int64 {
	if m != nil {
		return m.TradedTime
	}
	return 0
}

func (m *Trade) GetTradedTradingDay() int32 {
	if m != nil {
		return m.TradedTradingDay
	}
	return 0
}

func (m *Trade) GetFrontId() int32 {
	if m != nil {
		return m.FrontId
	}
	return 0
}

func (m *Trade) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Trade) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

func (m *Trade) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Trade) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Trade) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *Trade) GetTradeType() int32 {
	if m != nil {
		return m.TradeType
	}
	return 0
}

func (m *Trade) GetExchangeOrderId() string {
	if m != nil {
		return m.ExchangeOrderId
	}
	return ""
}

type TradeList struct {
	List                 []*Trade `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeList) Reset()         { *m = TradeList{} }
func (m *TradeList) String() string { return proto.CompactTextString(m) }
func (*TradeList) ProtoMessage()    {}
func (*TradeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee944bd90e8a0312, []int{1}
}

func (m *TradeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeList.Unmarshal(m, b)
}
func (m *TradeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeList.Marshal(b, m, deterministic)
}
func (m *TradeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeList.Merge(m, src)
}
func (m *TradeList) XXX_Size() int {
	return xxx_messageInfo_TradeList.Size(m)
}
func (m *TradeList) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeList.DiscardUnknown(m)
}

var xxx_messageInfo_TradeList proto.InternalMessageInfo

func (m *TradeList) GetList() []*Trade {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterEnum("goshare.TradeType", TradeType_name, TradeType_value)
	proto.RegisterType((*Trade)(nil), "goshare.Trade")
	proto.RegisterType((*TradeList)(nil), "goshare.TradeList")
}

func init() {
	proto.RegisterFile("trade.proto", fileDescriptor_ee944bd90e8a0312)
}

var fileDescriptor_ee944bd90e8a0312 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0x5f, 0x6f, 0xda, 0x3c,
	0x14, 0xc6, 0xdf, 0x94, 0xff, 0x87, 0xb7, 0x34, 0xb8, 0x2d, 0x73, 0x3b, 0x55, 0x43, 0xbd, 0x42,
	0xd5, 0x06, 0x52, 0x57, 0xed, 0x9e, 0x42, 0xa6, 0x46, 0xa2, 0x80, 0x82, 0x5b, 0x6d, 0xbb, 0xb1,
	0x42, 0x6c, 0x20, 0x6a, 0x13, 0x23, 0xc7, 0xa9, 0xc6, 0xa7, 0xdc, 0xb7, 0xd9, 0xf5, 0x64, 0x3b,
	0x30, 0xed, 0xce, 0xcf, 0xef, 0x79, 0x4e, 0x7c, 0x7c, 0xec, 0x40, 0x53, 0xc9, 0x90, 0xf1, 0xfe,
	0x56, 0x0a, 0x25, 0x50, 0x6d, 0x2d, 0xb2, 0x4d, 0x28, 0xf9, 0x65, 0x53, 0x48, 0xc6, 0xa5, 0xa5,
	0xd7, 0xbf, 0xcb, 0x50, 0x21, 0x3a, 0x85, 0x2e, 0xa1, 0xce, 0x7f, 0x46, 0x9b, 0x30, 0x5d, 0x73,
	0xec, 0x74, 0x9d, 0x5e, 0x23, 0x38, 0x68, 0xd4, 0x81, 0x6a, 0xb6, 0x4b, 0x96, 0xe2, 0x15, 0x1f,
	0x19, 0xa7, 0x50, 0x08, 0x43, 0x6d, 0x2b, 0x05, 0xcb, 0x23, 0x85, 0x4b, 0xc6, 0xd8, 0x4b, 0x74,
	0x07, 0x0d, 0x16, 0x4b, 0x1e, 0xa9, 0x58, 0xa4, 0xb8, 0xd2, 0x75, 0x7a, 0xad, 0xdb, 0x4e, 0xbf,
	0xe8, 0xa0, 0x3f, 0xde, 0x3b, 0x64, 0xb7, 0xe5, 0xc1, 0xdf, 0xa0, 0xde, 0x47, 0xac, 0x56, 0x19,
	0x57, 0xb8, 0xda, 0x75, 0x7a, 0x95, 0xa0, 0x50, 0xe8, 0x0c, 0x2a, 0x5b, 0x19, 0x47, 0x1c, 0xd7,
	0xba, 0x4e, 0xcf, 0x09, 0xac, 0xd0, 0xe9, 0x37, 0xf1, 0x9a, 0x27, 0x1c, 0xd7, 0x6d, 0xda, 0x2a,
	0xf4, 0x0e, 0x6a, 0x79, 0xc6, 0x25, 0x8d, 0x19, 0x6e, 0xd8, 0x76, 0xb5, 0xf4, 0x19, 0x3a, 0x85,
	0x8a, 0x0a, 0x35, 0x06, 0x83, 0xcb, 0x2a, 0xb4, 0x70, 0x99, 0x6b, 0xd8, 0xb4, 0x70, 0x99, 0xfb,
	0x0c, 0x5d, 0x40, 0xdd, 0xcc, 0x4e, 0xf3, 0xff, 0xed, 0xc9, 0x8c, 0xf6, 0x19, 0xfa, 0x50, 0x8c,
	0x95, 0x51, 0x15, 0x27, 0x1c, 0x1f, 0x77, 0x9d, 0x5e, 0x29, 0x00, 0x8b, 0x48, 0x9c, 0x70, 0xf4,
	0x11, 0xd0, 0x3e, 0x20, 0x43, 0x16, 0xa7, 0x6b, 0xca, 0xc2, 0x1d, 0x6e, 0x99, 0x16, 0xdd, 0x22,
	0x67, 0x8d, 0x71, 0xb8, 0xd3, 0x3b, 0xad, 0xa4, 0x48, 0x95, 0xde, 0xe9, 0xc4, 0x64, 0x6a, 0x46,
	0xfb, 0x0c, 0x5d, 0x01, 0x64, 0x3c, 0xcb, 0x62, 0x91, 0x6a, 0xd3, 0x35, 0x66, 0xa3, 0x20, 0x3e,
	0x43, 0xef, 0xa1, 0x61, 0x6e, 0x92, 0x4a, 0xbe, 0xc2, 0x6d, 0x7b, 0x63, 0x06, 0x04, 0x7c, 0xa5,
	0x4d, 0x33, 0x83, 0x34, 0x4c, 0x38, 0x46, 0xd6, 0xd4, 0x60, 0x1a, 0x26, 0x66, 0x70, 0x4b, 0x19,
	0xa6, 0xd1, 0x06, 0x9f, 0xda, 0xf9, 0x58, 0xa5, 0x8f, 0x66, 0x57, 0xb6, 0xec, 0xcc, 0x98, 0x60,
	0x91, 0x29, 0xbc, 0x02, 0x7b, 0x50, 0xaa, 0x76, 0x5b, 0x8e, 0xcf, 0x6d, 0x47, 0x86, 0xe8, 0x9b,
	0x44, 0x37, 0xd0, 0xde, 0x3f, 0x19, 0x6a, 0x5b, 0x8b, 0x19, 0xee, 0x98, 0xaf, 0x9c, 0xec, 0x8d,
	0x99, 0xe6, 0x3e, 0xbb, 0x1e, 0x40, 0xc3, 0xbc, 0xbb, 0x49, 0x9c, 0x29, 0x74, 0x0d, 0xe5, 0xd7,
	0x38, 0x53, 0xd8, 0xe9, 0x96, 0x7a, 0xcd, 0xdb, 0xd6, 0xe1, 0xa1, 0x98, 0x44, 0x60, 0xbc, 0x9b,
	0x5f, 0x4e, 0x51, 0x61, 0xb6, 0x3a, 0x86, 0x06, 0x21, 0x74, 0x3a, 0x0b, 0x1e, 0x87, 0x13, 0xf7,
	0x3f, 0x84, 0xe1, 0x8c, 0x10, 0x3a, 0x9b, 0x13, 0x7f, 0x36, 0x5d, 0x50, 0xef, 0x9b, 0x37, 0x7a,
	0xd2, 0x4b, 0xd7, 0x41, 0x00, 0x55, 0xed, 0x90, 0x91, 0x7b, 0x84, 0x10, 0xb4, 0x08, 0xa1, 0xde,
	0xd7, 0x39, 0x1d, 0x7b, 0x81, 0xff, 0xec, 0x8d, 0xdd, 0x12, 0xba, 0x84, 0x0e, 0x21, 0x74, 0x34,
	0x7b, 0xbc, 0xf7, 0xa7, 0x43, 0x5d, 0x73, 0xf0, 0xca, 0xe8, 0x1c, 0xda, 0x84, 0xd0, 0xb1, 0x37,
	0xf1, 0x9f, 0xbd, 0xe0, 0x3b, 0x1d, 0x4d, 0x66, 0x0b, 0xcf, 0xad, 0xa0, 0x0b, 0x38, 0x27, 0x84,
	0x2e, 0x3c, 0x42, 0x26, 0xde, 0xa3, 0x37, 0x25, 0x87, 0x8a, 0x6a, 0xd1, 0xc7, 0x7c, 0x32, 0x1c,
	0xfd, 0xeb, 0xd4, 0x50, 0x1b, 0x8e, 0x09, 0xa1, 0x81, 0x37, 0x7f, 0x0a, 0x46, 0x0f, 0xc3, 0x85,
	0xe7, 0xd6, 0xef, 0xbf, 0xfc, 0xb8, 0x5b, 0xc7, 0x6a, 0x93, 0x2f, 0xfb, 0x91, 0x48, 0x06, 0x41,
	0xf8, 0xc6, 0xd3, 0x87, 0x5c, 0x0c, 0xd6, 0xe2, 0x93, 0xf9, 0x37, 0x07, 0x99, 0x12, 0xd1, 0x4b,
	0xb1, 0xde, 0xbe, 0xac, 0x07, 0xc5, 0x54, 0x96, 0x55, 0x83, 0x3e, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0x29, 0x66, 0x90, 0xdf, 0x03, 0x00, 0x00,
}
