// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goshare/instrument.proto

package goshare

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 品种类型
type ProductType int32

const (
	ProductType_UNKOWN_PRODUCT ProductType = 0
	ProductType_FUTURE         ProductType = 1
	ProductType_STOCK          ProductType = 2
	ProductType_BOND           ProductType = 3
	ProductType_COMBINATION    ProductType = 4
	ProductType_OPTION         ProductType = 5
	ProductType_FUTURE_OPTION  ProductType = 6
	ProductType_SPOT_OPTION    ProductType = 7
	ProductType_SSE_ETF_OPTION ProductType = 8
)

var ProductType_name = map[int32]string{
	0: "UNKOWN_PRODUCT",
	1: "FUTURE",
	2: "STOCK",
	3: "BOND",
	4: "COMBINATION",
	5: "OPTION",
	6: "FUTURE_OPTION",
	7: "SPOT_OPTION",
	8: "SSE_ETF_OPTION",
}

var ProductType_value = map[string]int32{
	"UNKOWN_PRODUCT": 0,
	"FUTURE":         1,
	"STOCK":          2,
	"BOND":           3,
	"COMBINATION":    4,
	"OPTION":         5,
	"FUTURE_OPTION":  6,
	"SPOT_OPTION":    7,
	"SSE_ETF_OPTION": 8,
}

func (x ProductType) String() string {
	return proto.EnumName(ProductType_name, int32(x))
}

func (ProductType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{0}
}

type CallPutType int32

const (
	CallPutType_CALL CallPutType = 0
	CallPutType_PUT  CallPutType = 1
)

var CallPutType_name = map[int32]string{
	0: "CALL",
	1: "PUT",
}

var CallPutType_value = map[string]int32{
	"CALL": 0,
	"PUT":  1,
}

func (x CallPutType) String() string {
	return proto.EnumName(CallPutType_name, int32(x))
}

func (CallPutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{1}
}

// 合约组
type SymbolGroupType int32

const (
	SymbolGroupType_CTP_FUTURE_ALL      SymbolGroupType = 0
	SymbolGroupType_CTP_FUTURE_FUTURE   SymbolGroupType = 1
	SymbolGroupType_CTP_FUTURE_OPTION   SymbolGroupType = 2
	SymbolGroupType_CTP_FUTURE_COMBINE  SymbolGroupType = 3
	SymbolGroupType_CTP_SOPT_ALL        SymbolGroupType = 4
	SymbolGroupType_CTP_SOPT_ETF_OPTION SymbolGroupType = 5
	SymbolGroupType_CTP_SOPT_SSE_STOCK  SymbolGroupType = 6
	SymbolGroupType_CTP_SOPT_SZE_STOCK  SymbolGroupType = 7
)

var SymbolGroupType_name = map[int32]string{
	0: "CTP_FUTURE_ALL",
	1: "CTP_FUTURE_FUTURE",
	2: "CTP_FUTURE_OPTION",
	3: "CTP_FUTURE_COMBINE",
	4: "CTP_SOPT_ALL",
	5: "CTP_SOPT_ETF_OPTION",
	6: "CTP_SOPT_SSE_STOCK",
	7: "CTP_SOPT_SZE_STOCK",
}

var SymbolGroupType_value = map[string]int32{
	"CTP_FUTURE_ALL":      0,
	"CTP_FUTURE_FUTURE":   1,
	"CTP_FUTURE_OPTION":   2,
	"CTP_FUTURE_COMBINE":  3,
	"CTP_SOPT_ALL":        4,
	"CTP_SOPT_ETF_OPTION": 5,
	"CTP_SOPT_SSE_STOCK":  6,
	"CTP_SOPT_SZE_STOCK":  7,
}

func (x SymbolGroupType) String() string {
	return proto.EnumName(SymbolGroupType_name, int32(x))
}

func (SymbolGroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{2}
}

// 市场状态
type MarketStatus struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Send                 bool     `protobuf:"varint,2,opt,name=send,proto3" json:"send,omitempty"`
	Cancel               bool     `protobuf:"varint,3,opt,name=cancel,proto3" json:"cancel,omitempty"`
	Matching             bool     `protobuf:"varint,4,opt,name=matching,proto3" json:"matching,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketStatus) Reset()         { *m = MarketStatus{} }
func (m *MarketStatus) String() string { return proto.CompactTextString(m) }
func (*MarketStatus) ProtoMessage()    {}
func (*MarketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{0}
}

func (m *MarketStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketStatus.Unmarshal(m, b)
}
func (m *MarketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketStatus.Marshal(b, m, deterministic)
}
func (m *MarketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketStatus.Merge(m, src)
}
func (m *MarketStatus) XXX_Size() int {
	return xxx_messageInfo_MarketStatus.Size(m)
}
func (m *MarketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MarketStatus proto.InternalMessageInfo

func (m *MarketStatus) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketStatus) GetSend() bool {
	if m != nil {
		return m.Send
	}
	return false
}

func (m *MarketStatus) GetCancel() bool {
	if m != nil {
		return m.Cancel
	}
	return false
}

func (m *MarketStatus) GetMatching() bool {
	if m != nil {
		return m.Matching
	}
	return false
}

// 合约属性
type Instrument struct {
	Exchange                    string          `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol                      string          `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Product                     string          `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Multiple                    int32           `protobuf:"varint,4,opt,name=multiple,proto3" json:"multiple,omitempty"`
	PriceTick                   float64         `protobuf:"fixed64,5,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`
	Name                        string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	PositionRank                int32           `protobuf:"varint,7,opt,name=position_rank,json=positionRank,proto3" json:"position_rank,omitempty"`
	UpdateTime                  int64           `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	TradingDay                  int32           `protobuf:"varint,9,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	UpperLimit                  float64         `protobuf:"fixed64,10,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	LowerLimit                  float64         `protobuf:"fixed64,11,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`
	PreClose                    float64         `protobuf:"fixed64,12,opt,name=pre_close,json=preClose,proto3" json:"pre_close,omitempty"`
	PreSettlement               float64         `protobuf:"fixed64,13,opt,name=pre_settlement,json=preSettlement,proto3" json:"pre_settlement,omitempty"`
	PreVolume                   int32           `protobuf:"varint,14,opt,name=pre_volume,json=preVolume,proto3" json:"pre_volume,omitempty"`
	PrePosition                 int32           `protobuf:"varint,15,opt,name=pre_position,json=prePosition,proto3" json:"pre_position,omitempty"`
	SettlementPrice             float64         `protobuf:"fixed64,16,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`
	CreateDate                  int32           `protobuf:"varint,17,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	OpenDate                    int32           `protobuf:"varint,18,opt,name=open_date,json=openDate,proto3" json:"open_date,omitempty"`
	ExpireDate                  int32           `protobuf:"varint,19,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	StartDeliverDate            int32           `protobuf:"varint,20,opt,name=start_deliver_date,json=startDeliverDate,proto3" json:"start_deliver_date,omitempty"`
	EndDeliverDate              int32           `protobuf:"varint,21,opt,name=end_deliver_date,json=endDeliverDate,proto3" json:"end_deliver_date,omitempty"`
	IsCloseTodayAllowed         bool            `protobuf:"varint,22,opt,name=is_close_today_allowed,json=isCloseTodayAllowed,proto3" json:"is_close_today_allowed,omitempty"`
	MaxMarketOrderVolume        int32           `protobuf:"varint,23,opt,name=max_market_order_volume,json=maxMarketOrderVolume,proto3" json:"max_market_order_volume,omitempty"`
	MinMarketOrderVolume        int32           `protobuf:"varint,24,opt,name=min_market_order_volume,json=minMarketOrderVolume,proto3" json:"min_market_order_volume,omitempty"`
	MaxLimitOrderVolume         int32           `protobuf:"varint,25,opt,name=max_limit_order_volume,json=maxLimitOrderVolume,proto3" json:"max_limit_order_volume,omitempty"`
	MinLimitOrderVolume         int32           `protobuf:"varint,26,opt,name=min_limit_order_volume,json=minLimitOrderVolume,proto3" json:"min_limit_order_volume,omitempty"`
	UnderlyingSymbol            string          `protobuf:"bytes,27,opt,name=underlying_symbol,json=underlyingSymbol,proto3" json:"underlying_symbol,omitempty"`
	StrikePrice                 float64         `protobuf:"fixed64,28,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`
	CallOrPut                   string          `protobuf:"bytes,29,opt,name=call_or_put,json=callOrPut,proto3" json:"call_or_put,omitempty"`
	UnderlyingMultiple          float64         `protobuf:"fixed64,30,opt,name=underlying_multiple,json=underlyingMultiple,proto3" json:"underlying_multiple,omitempty"`
	MinBuyVolume                int32           `protobuf:"varint,31,opt,name=min_buy_volume,json=minBuyVolume,proto3" json:"min_buy_volume,omitempty"`
	MinSellVolume               int32           `protobuf:"varint,32,opt,name=min_sell_volume,json=minSellVolume,proto3" json:"min_sell_volume,omitempty"`
	IsTrading                   bool            `protobuf:"varint,33,opt,name=is_trading,json=isTrading,proto3" json:"is_trading,omitempty"`
	ExerciseDateType            string          `protobuf:"bytes,34,opt,name=exercise_date_type,json=exerciseDateType,proto3" json:"exercise_date_type,omitempty"`
	ProductName                 string          `protobuf:"bytes,35,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductType                 int32           `protobuf:"varint,36,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	ProductClass                string          `protobuf:"bytes,37,opt,name=product_class,json=productClass,proto3" json:"product_class,omitempty"`
	DistinguishPositionTimeType bool            `protobuf:"varint,38,opt,name=distinguish_position_time_type,json=distinguishPositionTimeType,proto3" json:"distinguish_position_time_type,omitempty"`
	TimeRule                    []*MarketStatus `protobuf:"bytes,39,rep,name=time_rule,json=timeRule,proto3" json:"time_rule,omitempty"`
	LeftDays                    int32           `protobuf:"varint,40,opt,name=left_days,json=leftDays,proto3" json:"left_days,omitempty"`
	MonthGroup                  string          `protobuf:"bytes,41,opt,name=month_group,json=monthGroup,proto3" json:"month_group,omitempty"`
	CallPutType                 CallPutType     `protobuf:"varint,42,opt,name=call_put_type,json=callPutType,proto3,enum=goshare.CallPutType" json:"call_put_type,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}        `json:"-"`
	XXX_unrecognized            []byte          `json:"-"`
	XXX_sizecache               int32           `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{1}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Instrument) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Instrument) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Instrument) GetMultiple() int32 {
	if m != nil {
		return m.Multiple
	}
	return 0
}

func (m *Instrument) GetPriceTick() float64 {
	if m != nil {
		return m.PriceTick
	}
	return 0
}

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetPositionRank() int32 {
	if m != nil {
		return m.PositionRank
	}
	return 0
}

func (m *Instrument) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Instrument) GetTradingDay() int32 {
	if m != nil {
		return m.TradingDay
	}
	return 0
}

func (m *Instrument) GetUpperLimit() float64 {
	if m != nil {
		return m.UpperLimit
	}
	return 0
}

func (m *Instrument) GetLowerLimit() float64 {
	if m != nil {
		return m.LowerLimit
	}
	return 0
}

func (m *Instrument) GetPreClose() float64 {
	if m != nil {
		return m.PreClose
	}
	return 0
}

func (m *Instrument) GetPreSettlement() float64 {
	if m != nil {
		return m.PreSettlement
	}
	return 0
}

func (m *Instrument) GetPreVolume() int32 {
	if m != nil {
		return m.PreVolume
	}
	return 0
}

func (m *Instrument) GetPrePosition() int32 {
	if m != nil {
		return m.PrePosition
	}
	return 0
}

func (m *Instrument) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *Instrument) GetCreateDate() int32 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *Instrument) GetOpenDate() int32 {
	if m != nil {
		return m.OpenDate
	}
	return 0
}

func (m *Instrument) GetExpireDate() int32 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *Instrument) GetStartDeliverDate() int32 {
	if m != nil {
		return m.StartDeliverDate
	}
	return 0
}

func (m *Instrument) GetEndDeliverDate() int32 {
	if m != nil {
		return m.EndDeliverDate
	}
	return 0
}

func (m *Instrument) GetIsCloseTodayAllowed() bool {
	if m != nil {
		return m.IsCloseTodayAllowed
	}
	return false
}

func (m *Instrument) GetMaxMarketOrderVolume() int32 {
	if m != nil {
		return m.MaxMarketOrderVolume
	}
	return 0
}

func (m *Instrument) GetMinMarketOrderVolume() int32 {
	if m != nil {
		return m.MinMarketOrderVolume
	}
	return 0
}

func (m *Instrument) GetMaxLimitOrderVolume() int32 {
	if m != nil {
		return m.MaxLimitOrderVolume
	}
	return 0
}

func (m *Instrument) GetMinLimitOrderVolume() int32 {
	if m != nil {
		return m.MinLimitOrderVolume
	}
	return 0
}

func (m *Instrument) GetUnderlyingSymbol() string {
	if m != nil {
		return m.UnderlyingSymbol
	}
	return ""
}

func (m *Instrument) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *Instrument) GetCallOrPut() string {
	if m != nil {
		return m.CallOrPut
	}
	return ""
}

func (m *Instrument) GetUnderlyingMultiple() float64 {
	if m != nil {
		return m.UnderlyingMultiple
	}
	return 0
}

func (m *Instrument) GetMinBuyVolume() int32 {
	if m != nil {
		return m.MinBuyVolume
	}
	return 0
}

func (m *Instrument) GetMinSellVolume() int32 {
	if m != nil {
		return m.MinSellVolume
	}
	return 0
}

func (m *Instrument) GetIsTrading() bool {
	if m != nil {
		return m.IsTrading
	}
	return false
}

func (m *Instrument) GetExerciseDateType() string {
	if m != nil {
		return m.ExerciseDateType
	}
	return ""
}

func (m *Instrument) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Instrument) GetProductType() int32 {
	if m != nil {
		return m.ProductType
	}
	return 0
}

func (m *Instrument) GetProductClass() string {
	if m != nil {
		return m.ProductClass
	}
	return ""
}

func (m *Instrument) GetDistinguishPositionTimeType() bool {
	if m != nil {
		return m.DistinguishPositionTimeType
	}
	return false
}

func (m *Instrument) GetTimeRule() []*MarketStatus {
	if m != nil {
		return m.TimeRule
	}
	return nil
}

func (m *Instrument) GetLeftDays() int32 {
	if m != nil {
		return m.LeftDays
	}
	return 0
}

func (m *Instrument) GetMonthGroup() string {
	if m != nil {
		return m.MonthGroup
	}
	return ""
}

func (m *Instrument) GetCallPutType() CallPutType {
	if m != nil {
		return m.CallPutType
	}
	return CallPutType_CALL
}

// 合约列表
type InstrumentList struct {
	List                 []*Instrument `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InstrumentList) Reset()         { *m = InstrumentList{} }
func (m *InstrumentList) String() string { return proto.CompactTextString(m) }
func (*InstrumentList) ProtoMessage()    {}
func (*InstrumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{2}
}

func (m *InstrumentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentList.Unmarshal(m, b)
}
func (m *InstrumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentList.Marshal(b, m, deterministic)
}
func (m *InstrumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentList.Merge(m, src)
}
func (m *InstrumentList) XXX_Size() int {
	return xxx_messageInfo_InstrumentList.Size(m)
}
func (m *InstrumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentList.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentList proto.InternalMessageInfo

func (m *InstrumentList) GetList() []*Instrument {
	if m != nil {
		return m.List
	}
	return nil
}

// 期权按月分组
type OptionMonthGroup struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Product              string   `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Strike               string   `protobuf:"bytes,3,opt,name=strike,proto3" json:"strike,omitempty"`
	MonthGroup           string   `protobuf:"bytes,4,opt,name=month_group,json=monthGroup,proto3" json:"month_group,omitempty"`
	LeftDays             int32    `protobuf:"varint,5,opt,name=left_days,json=leftDays,proto3" json:"left_days,omitempty"`
	ProductName          string   `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Instruments          []string `protobuf:"bytes,7,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionMonthGroup) Reset()         { *m = OptionMonthGroup{} }
func (m *OptionMonthGroup) String() string { return proto.CompactTextString(m) }
func (*OptionMonthGroup) ProtoMessage()    {}
func (*OptionMonthGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{3}
}

func (m *OptionMonthGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionMonthGroup.Unmarshal(m, b)
}
func (m *OptionMonthGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionMonthGroup.Marshal(b, m, deterministic)
}
func (m *OptionMonthGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionMonthGroup.Merge(m, src)
}
func (m *OptionMonthGroup) XXX_Size() int {
	return xxx_messageInfo_OptionMonthGroup.Size(m)
}
func (m *OptionMonthGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionMonthGroup.DiscardUnknown(m)
}

var xxx_messageInfo_OptionMonthGroup proto.InternalMessageInfo

func (m *OptionMonthGroup) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *OptionMonthGroup) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *OptionMonthGroup) GetStrike() string {
	if m != nil {
		return m.Strike
	}
	return ""
}

func (m *OptionMonthGroup) GetMonthGroup() string {
	if m != nil {
		return m.MonthGroup
	}
	return ""
}

func (m *OptionMonthGroup) GetLeftDays() int32 {
	if m != nil {
		return m.LeftDays
	}
	return 0
}

func (m *OptionMonthGroup) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *OptionMonthGroup) GetInstruments() []string {
	if m != nil {
		return m.Instruments
	}
	return nil
}

// 期权组列表
type OptionMonthGroupList struct {
	Exchange             string              `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Product              string              `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	List                 []*OptionMonthGroup `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OptionMonthGroupList) Reset()         { *m = OptionMonthGroupList{} }
func (m *OptionMonthGroupList) String() string { return proto.CompactTextString(m) }
func (*OptionMonthGroupList) ProtoMessage()    {}
func (*OptionMonthGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{4}
}

func (m *OptionMonthGroupList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionMonthGroupList.Unmarshal(m, b)
}
func (m *OptionMonthGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionMonthGroupList.Marshal(b, m, deterministic)
}
func (m *OptionMonthGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionMonthGroupList.Merge(m, src)
}
func (m *OptionMonthGroupList) XXX_Size() int {
	return xxx_messageInfo_OptionMonthGroupList.Size(m)
}
func (m *OptionMonthGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionMonthGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_OptionMonthGroupList proto.InternalMessageInfo

func (m *OptionMonthGroupList) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *OptionMonthGroupList) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *OptionMonthGroupList) GetList() []*OptionMonthGroup {
	if m != nil {
		return m.List
	}
	return nil
}

// 合约
type UniqueSymbol struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniqueSymbol) Reset()         { *m = UniqueSymbol{} }
func (m *UniqueSymbol) String() string { return proto.CompactTextString(m) }
func (*UniqueSymbol) ProtoMessage()    {}
func (*UniqueSymbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf3e5650851e9a9, []int{5}
}

func (m *UniqueSymbol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniqueSymbol.Unmarshal(m, b)
}
func (m *UniqueSymbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniqueSymbol.Marshal(b, m, deterministic)
}
func (m *UniqueSymbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueSymbol.Merge(m, src)
}
func (m *UniqueSymbol) XXX_Size() int {
	return xxx_messageInfo_UniqueSymbol.Size(m)
}
func (m *UniqueSymbol) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueSymbol.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueSymbol proto.InternalMessageInfo

func (m *UniqueSymbol) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *UniqueSymbol) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func init() {
	proto.RegisterEnum("goshare.ProductType", ProductType_name, ProductType_value)
	proto.RegisterEnum("goshare.CallPutType", CallPutType_name, CallPutType_value)
	proto.RegisterEnum("goshare.SymbolGroupType", SymbolGroupType_name, SymbolGroupType_value)
	proto.RegisterType((*MarketStatus)(nil), "goshare.MarketStatus")
	proto.RegisterType((*Instrument)(nil), "goshare.Instrument")
	proto.RegisterType((*InstrumentList)(nil), "goshare.InstrumentList")
	proto.RegisterType((*OptionMonthGroup)(nil), "goshare.OptionMonthGroup")
	proto.RegisterType((*OptionMonthGroupList)(nil), "goshare.OptionMonthGroupList")
	proto.RegisterType((*UniqueSymbol)(nil), "goshare.UniqueSymbol")
}

func init() { proto.RegisterFile("goshare/instrument.proto", fileDescriptor_faf3e5650851e9a9) }

var fileDescriptor_faf3e5650851e9a9 = []byte{
	// 1263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdb, 0x52, 0x1b, 0x47,
	0x13, 0xb6, 0x90, 0xd0, 0xa1, 0x25, 0xc4, 0x32, 0x60, 0x3c, 0xb6, 0x7f, 0x1b, 0x19, 0x9f, 0x64,
	0xfe, 0x18, 0xaa, 0xec, 0x24, 0x95, 0x5c, 0x1a, 0x81, 0x13, 0x97, 0x01, 0xa9, 0x56, 0x4b, 0x52,
	0xe5, 0x9b, 0xad, 0x65, 0x35, 0x11, 0x13, 0xed, 0x29, 0x33, 0xb3, 0x04, 0x55, 0x1e, 0x24, 0x6f,
	0x94, 0xd7, 0xc8, 0x45, 0x5e, 0x24, 0x35, 0x3d, 0xb3, 0x3a, 0x80, 0x2b, 0x17, 0xbe, 0x9b, 0xf9,
	0xfa, 0xeb, 0xee, 0xe9, 0x6f, 0xbb, 0x67, 0x16, 0xe8, 0x38, 0x95, 0x97, 0x81, 0x60, 0x07, 0x3c,
	0x91, 0x4a, 0xe4, 0x31, 0x4b, 0xd4, 0x7e, 0x26, 0x52, 0x95, 0x92, 0x9a, 0xb5, 0xec, 0xfe, 0x0a,
	0xad, 0xd3, 0x40, 0x4c, 0x98, 0x1a, 0xaa, 0x40, 0xe5, 0x92, 0x10, 0xa8, 0x28, 0x1e, 0x33, 0x5a,
	0xea, 0x94, 0xba, 0x65, 0x17, 0xd7, 0x1a, 0x93, 0x2c, 0x19, 0xd1, 0x95, 0x4e, 0xa9, 0x5b, 0x77,
	0x71, 0x4d, 0xb6, 0xa1, 0x1a, 0x06, 0x49, 0xc8, 0x22, 0x5a, 0x46, 0xd4, 0xee, 0xc8, 0x03, 0xa8,
	0xc7, 0x81, 0x0a, 0x2f, 0x79, 0x32, 0xa6, 0x15, 0xb4, 0xcc, 0xf6, 0xbb, 0x7f, 0xb7, 0x00, 0x3e,
	0xcc, 0x4e, 0xa2, 0xa9, 0xec, 0x3a, 0xbc, 0x0c, 0x92, 0xb1, 0x49, 0xd7, 0x70, 0x67, 0x7b, 0x1d,
	0x5e, 0x4e, 0xe3, 0x8b, 0x34, 0xc2, 0xa4, 0x0d, 0xd7, 0xee, 0x08, 0x85, 0x5a, 0x26, 0xd2, 0x51,
	0x1e, 0x2a, 0xcc, 0xdb, 0x70, 0x8b, 0x2d, 0x26, 0xce, 0x23, 0xc5, 0xb3, 0x88, 0x61, 0xe2, 0x55,
	0x77, 0xb6, 0x27, 0x8f, 0x00, 0x32, 0xc1, 0x43, 0xe6, 0x2b, 0x1e, 0x4e, 0xe8, 0x6a, 0xa7, 0xd4,
	0x2d, 0xb9, 0x0d, 0x44, 0x3c, 0x1e, 0x4e, 0x74, 0x7d, 0x49, 0x10, 0x33, 0x5a, 0xc5, 0x88, 0xb8,
	0x26, 0x4f, 0x61, 0x2d, 0x4b, 0x25, 0x57, 0x3c, 0x4d, 0x7c, 0x11, 0x24, 0x13, 0x5a, 0xc3, 0x98,
	0xad, 0x02, 0x74, 0x83, 0x64, 0x42, 0x76, 0xa0, 0x99, 0x67, 0xa3, 0x40, 0xe9, 0xc0, 0x31, 0xa3,
	0x75, 0xd4, 0x0c, 0x0c, 0xe4, 0x69, 0xe5, 0x76, 0xa0, 0xa9, 0x44, 0x30, 0xe2, 0xc9, 0xd8, 0x1f,
	0x05, 0x53, 0xda, 0xc0, 0x18, 0x60, 0xa1, 0xa3, 0x60, 0x6a, 0x22, 0x64, 0x4c, 0xf8, 0x11, 0x8f,
	0xb9, 0xa2, 0x80, 0x47, 0x03, 0x84, 0x4e, 0x34, 0xa2, 0x09, 0x51, 0xfa, 0xfb, 0x8c, 0xd0, 0x34,
	0x04, 0x84, 0x0c, 0xe1, 0x21, 0x34, 0x32, 0xc1, 0xfc, 0x30, 0x4a, 0x25, 0xa3, 0x2d, 0x34, 0xd7,
	0x33, 0xc1, 0x7a, 0x7a, 0x4f, 0x9e, 0x43, 0x5b, 0x1b, 0x25, 0x53, 0x2a, 0x62, 0x5a, 0x74, 0xba,
	0x86, 0x8c, 0xb5, 0x4c, 0xb0, 0xe1, 0x0c, 0x34, 0xfa, 0x30, 0xff, 0x2a, 0x8d, 0xf2, 0x98, 0xd1,
	0x36, 0x9e, 0x52, 0x47, 0xfd, 0x09, 0x01, 0xf2, 0x04, 0x5a, 0xda, 0x5c, 0x94, 0x4e, 0xd7, 0x91,
	0xd0, 0xcc, 0x04, 0x1b, 0x58, 0x88, 0xbc, 0x02, 0x67, 0x9e, 0xc4, 0x47, 0x69, 0xa9, 0x83, 0xa9,
	0xd6, 0xe7, 0xf8, 0x40, 0xc3, 0xba, 0xa2, 0x50, 0x30, 0x2d, 0x9a, 0x96, 0x89, 0x6e, 0x18, 0x4d,
	0x0c, 0x74, 0x14, 0x28, 0xa6, 0x2b, 0x4a, 0x33, 0x96, 0x18, 0x33, 0x31, 0x9f, 0x52, 0x03, 0x68,
	0xdc, 0x81, 0x26, 0xbb, 0xce, 0xb8, 0xb0, 0xde, 0x9b, 0xc6, 0xdb, 0x40, 0x48, 0xf8, 0x0a, 0x88,
	0x54, 0x81, 0x50, 0xfe, 0x88, 0x45, 0xfc, 0x8a, 0x09, 0xc3, 0xdb, 0x42, 0x9e, 0x83, 0x96, 0x23,
	0x63, 0x40, 0x76, 0x17, 0x1c, 0x96, 0x8c, 0x96, 0xb9, 0x77, 0x91, 0xdb, 0x66, 0xc9, 0x68, 0x91,
	0xf9, 0x16, 0xb6, 0xb9, 0x34, 0x32, 0xfb, 0x2a, 0x1d, 0x05, 0x53, 0x3f, 0x88, 0xf4, 0x67, 0x18,
	0xd1, 0x6d, 0x6c, 0xf3, 0x4d, 0x2e, 0x51, 0x73, 0x4f, 0xdb, 0xde, 0x19, 0x13, 0xf9, 0x06, 0xee,
	0xc5, 0xc1, 0xb5, 0x1f, 0xe3, 0x84, 0xf9, 0xa9, 0x18, 0x31, 0x51, 0xa8, 0x7c, 0x0f, 0xb3, 0x6c,
	0xc5, 0xc1, 0xb5, 0x99, 0xbf, 0xbe, 0x36, 0x5a, 0xc1, 0xb5, 0x1b, 0x4f, 0x3e, 0xeb, 0x46, 0xad,
	0x1b, 0x4f, 0x6e, 0xbb, 0xbd, 0x85, 0x6d, 0x9d, 0x0d, 0x3b, 0x65, 0xd9, 0xeb, 0x3e, 0x7a, 0x6d,
	0xc6, 0xc1, 0x35, 0x36, 0xcd, 0x4d, 0x27, 0x9e, 0x7c, 0xce, 0xe9, 0x81, 0x75, 0xe2, 0xc9, 0x2d,
	0xa7, 0xff, 0xc3, 0x46, 0x9e, 0x8c, 0x98, 0x88, 0xa6, 0xba, 0xb5, 0xed, 0xa4, 0x3e, 0xc4, 0xf1,
	0x71, 0xe6, 0x86, 0xa1, 0x99, 0xd9, 0x27, 0xd0, 0x92, 0x4a, 0xf0, 0x09, 0xb3, 0x7d, 0xf1, 0x3f,
	0xec, 0x8b, 0xa6, 0xc1, 0x4c, 0x4f, 0x3c, 0x86, 0x66, 0x18, 0x44, 0x91, 0x9f, 0x0a, 0x3f, 0xcb,
	0x15, 0x7d, 0x84, 0x91, 0x1a, 0x1a, 0xea, 0x8b, 0x41, 0xae, 0xc8, 0x01, 0x6c, 0x2e, 0xe4, 0x9b,
	0xcd, 0xf9, 0x63, 0x8c, 0x44, 0xe6, 0xa6, 0xd3, 0x62, 0xe2, 0x9f, 0x41, 0x5b, 0x57, 0x75, 0x91,
	0x4f, 0x8b, 0x6a, 0x76, 0xcc, 0xfc, 0xc6, 0x3c, 0x39, 0xcc, 0xa7, 0xb6, 0x8c, 0x17, 0xb0, 0xae,
	0x59, 0x92, 0x45, 0x51, 0x41, 0xeb, 0x20, 0x6d, 0x2d, 0xe6, 0xc9, 0x90, 0x45, 0x91, 0xe5, 0x3d,
	0x02, 0xe0, 0xd2, 0xb7, 0x63, 0x4b, 0x9f, 0xe0, 0xf7, 0x6e, 0x70, 0xe9, 0x19, 0x40, 0xb7, 0x1c,
	0xbb, 0x66, 0x22, 0xe4, 0xd2, 0x74, 0xa5, 0xaf, 0xa6, 0x19, 0xa3, 0xbb, 0x46, 0x8e, 0xc2, 0xa2,
	0x9b, 0xc8, 0x9b, 0x66, 0x76, 0x9a, 0xf0, 0xce, 0xf2, 0xf1, 0xd6, 0x79, 0x8a, 0xbc, 0xa6, 0xc5,
	0xce, 0x82, 0x78, 0x89, 0x82, 0xa1, 0x9e, 0x15, 0x03, 0x87, 0x18, 0x46, 0xd1, 0xf7, 0x93, 0xa5,
	0x84, 0x51, 0x20, 0x25, 0x7d, 0x8e, 0x61, 0x0a, 0xbf, 0x9e, 0xc6, 0x48, 0x0f, 0x1e, 0x8f, 0xb8,
	0x54, 0x3c, 0x19, 0xe7, 0x5c, 0x5e, 0xce, 0x06, 0x18, 0x6f, 0x2b, 0x13, 0xf9, 0x05, 0xd6, 0xf2,
	0x70, 0x81, 0x55, 0x8c, 0xb4, 0xbe, 0xbf, 0x30, 0xd3, 0x1b, 0x68, 0x20, 0x5f, 0xe4, 0x11, 0xa3,
	0x2f, 0x3b, 0xe5, 0x6e, 0xf3, 0xcd, 0xdd, 0x7d, 0xfb, 0x7c, 0xec, 0x2f, 0xbe, 0x1d, 0x6e, 0x5d,
	0xf3, 0xdc, 0x3c, 0xc2, 0x11, 0x8e, 0xd8, 0x2f, 0x4a, 0x5f, 0x7a, 0x92, 0x76, 0xcd, 0x08, 0x6b,
	0xe0, 0x28, 0x98, 0x4a, 0x3d, 0xc2, 0x71, 0x9a, 0xa8, 0x4b, 0x7f, 0x2c, 0xd2, 0x3c, 0xa3, 0xaf,
	0xf0, 0xe0, 0x80, 0xd0, 0x0f, 0x1a, 0x21, 0xdf, 0xc1, 0x1a, 0x76, 0x43, 0x96, 0xdb, 0xfa, 0xf7,
	0x3a, 0xa5, 0x6e, 0xfb, 0xcd, 0xd6, 0x2c, 0x6b, 0x2f, 0x88, 0xa2, 0x41, 0x8e, 0x42, 0xb8, 0xd8,
	0x38, 0x76, 0xb3, 0xfb, 0x3d, 0xb4, 0xe7, 0x0f, 0xcc, 0x09, 0x97, 0x8a, 0xbc, 0x84, 0x4a, 0xc4,
	0xa5, 0xa2, 0x25, 0x3c, 0xf8, 0xe6, 0x2c, 0xc4, 0x9c, 0xe6, 0x22, 0x61, 0xf7, 0x9f, 0x12, 0x38,
	0xfd, 0x4c, 0x57, 0x7e, 0x3a, 0x3f, 0xc9, 0x7f, 0x3d, 0x51, 0x0b, 0x4f, 0xd1, 0xca, 0xf2, 0x53,
	0xa4, 0x1f, 0x2f, 0x6c, 0x6e, 0xfb, 0x46, 0xd9, 0xdd, 0xcd, 0xc2, 0x2b, 0xb7, 0x0a, 0x5f, 0x92,
	0x6d, 0xf5, 0x86, 0x6c, 0x37, 0xfb, 0xa6, 0x7a, 0xbb, 0x6f, 0x3a, 0xd0, 0x9c, 0xbf, 0xf4, 0x92,
	0xd6, 0x3a, 0x65, 0xcd, 0x58, 0x80, 0x76, 0xff, 0x80, 0xad, 0x9b, 0x45, 0xa2, 0x4c, 0x5f, 0x56,
	0xe8, 0x6b, 0x2b, 0x6e, 0x19, 0xc5, 0xbd, 0x3f, 0x13, 0xf7, 0x66, 0x0a, 0x2b, 0xf1, 0x21, 0xb4,
	0xce, 0x13, 0xfe, 0x5b, 0xce, 0xec, 0xc5, 0xf0, 0x05, 0x3f, 0x00, 0x7b, 0x7f, 0x96, 0xa0, 0x39,
	0x58, 0x98, 0x03, 0x02, 0xed, 0xf3, 0xb3, 0x8f, 0xfd, 0x9f, 0xcf, 0xfc, 0x81, 0xdb, 0x3f, 0x3a,
	0xef, 0x79, 0xce, 0x1d, 0x02, 0x50, 0x7d, 0x7f, 0xee, 0x9d, 0xbb, 0xc7, 0x4e, 0x89, 0x34, 0x60,
	0x75, 0xe8, 0xf5, 0x7b, 0x1f, 0x9d, 0x15, 0x52, 0x87, 0xca, 0x61, 0xff, 0xec, 0xc8, 0x29, 0x93,
	0x75, 0x68, 0xf6, 0xfa, 0xa7, 0x87, 0x1f, 0xce, 0xde, 0x79, 0x1f, 0xfa, 0x67, 0x4e, 0x45, 0x7b,
	0xf4, 0x07, 0xb8, 0x5e, 0x25, 0x1b, 0xb0, 0x66, 0xbc, 0x7d, 0x0b, 0x55, 0x35, 0x7f, 0x38, 0xe8,
	0x7b, 0x05, 0x50, 0xd3, 0x59, 0x87, 0xc3, 0x63, 0xff, 0xd8, 0x7b, 0x5f, 0x60, 0xf5, 0xbd, 0x0e,
	0x34, 0x17, 0xfa, 0x52, 0x67, 0xeb, 0xbd, 0x3b, 0x39, 0x71, 0xee, 0x90, 0x1a, 0x94, 0x07, 0xe7,
	0x9e, 0x53, 0xda, 0xfb, 0xab, 0x04, 0xeb, 0xa6, 0x74, 0x54, 0xa5, 0x38, 0x7f, 0xcf, 0x1b, 0xf8,
	0x36, 0xa3, 0x71, 0xb8, 0x0b, 0x1b, 0x0b, 0xd8, 0xac, 0x94, 0x65, 0xd8, 0xe6, 0x5d, 0x21, 0xdb,
	0x40, 0x16, 0x60, 0x53, 0xd7, 0xb1, 0x53, 0x26, 0x0e, 0xb4, 0x34, 0x3e, 0xec, 0x0f, 0x3c, 0x8c,
	0x5b, 0x21, 0xf7, 0x60, 0x73, 0x86, 0x2c, 0x1c, 0x7d, 0xb5, 0x08, 0x81, 0x06, 0x5d, 0x97, 0x51,
	0xac, 0xba, 0x8c, 0x7f, 0x2a, 0xf0, 0xda, 0xe1, 0xb7, 0x9f, 0xbe, 0x1e, 0x73, 0x75, 0x99, 0x5f,
	0xec, 0x87, 0x69, 0x7c, 0xe0, 0x06, 0x57, 0x2c, 0xf9, 0x31, 0x4f, 0x0f, 0xc6, 0xe9, 0x6b, 0xfc,
	0xbb, 0x3c, 0x90, 0x2a, 0x0d, 0x27, 0x76, 0x9d, 0x4d, 0xc6, 0x07, 0xb6, 0x2f, 0x2e, 0xaa, 0x08,
	0xbd, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x52, 0x27, 0xc3, 0x98, 0x0a, 0x00, 0x00,
}
