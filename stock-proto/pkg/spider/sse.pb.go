// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sse.proto

package spider

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SSEStockOption 上证交易所ETF期权
type SSEStockOption struct {
	// 行权价
	ExercisePrice        string   `protobuf:"bytes,1,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercise_price,omitempty"`
	UpdateVersion        string   `protobuf:"bytes,2,opt,name=update_version,json=updateVersion,proto3" json:"update_version,omitempty"`
	OptionType           string   `protobuf:"bytes,3,opt,name=option_type,json=optionType,proto3" json:"option_type,omitempty"`
	DailyPriceUpLimit    string   `protobuf:"bytes,4,opt,name=daily_price_up_limit,json=dailyPriceUpLimit,proto3" json:"daily_price_up_limit,omitempty"`
	TimeSave             string   `protobuf:"bytes,5,opt,name=time_save,json=timeSave,proto3" json:"time_save,omitempty"`
	DELIST_Flag          string   `protobuf:"bytes,6,opt,name=DELIST_Flag,json=DELISTFlag,proto3" json:"DELIST_Flag,omitempty"`
	StartDate            string   `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	ExpireDate           string   `protobuf:"bytes,8,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	ContractUnit         string   `protobuf:"bytes,9,opt,name=contract_unit,json=contractUnit,proto3" json:"contract_unit,omitempty"`
	CallOrPut            string   `protobuf:"bytes,10,opt,name=call_or_put,json=callOrPut,proto3" json:"call_or_put,omitempty"`
	LmtOrdMaxFloor       string   `protobuf:"bytes,11,opt,name=lmt_ord_max_floor,json=lmtOrdMaxFloor,proto3" json:"lmt_ord_max_floor,omitempty"`
	DeliveryDate         string   `protobuf:"bytes,12,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`
	ChangeFlag           string   `protobuf:"bytes,13,opt,name=change_flag,json=changeFlag,proto3" json:"change_flag,omitempty"`
	MktOrdMaxFloor       string   `protobuf:"bytes,14,opt,name=mkt_ord_max_floor,json=mktOrdMaxFloor,proto3" json:"mkt_ord_max_floor,omitempty"`
	UnderlyingType       string   `protobuf:"bytes,15,opt,name=underlying_type,json=underlyingType,proto3" json:"underlying_type,omitempty"`
	DailyPriceDownLimit  string   `protobuf:"bytes,16,opt,name=daily_price_down_limit,json=dailyPriceDownLimit,proto3" json:"daily_price_down_limit,omitempty"`
	RoundLot             string   `protobuf:"bytes,17,opt,name=round_lot,json=roundLot,proto3" json:"round_lot,omitempty"`
	SecurityClosePX      string   `protobuf:"bytes,18,opt,name=security_closePX,json=securityClosePX,proto3" json:"security_closePX,omitempty"`
	SettlPrice           string   `protobuf:"bytes,19,opt,name=settl_price,json=settlPrice,proto3" json:"settl_price,omitempty"`
	ContractSymbol       string   `protobuf:"bytes,20,opt,name=contract_symbol,json=contractSymbol,proto3" json:"contract_symbol,omitempty"`
	Num                  string   `protobuf:"bytes,21,opt,name=num,proto3" json:"num,omitempty"`
	ContractID           string   `protobuf:"bytes,22,opt,name=contractID,proto3" json:"contractID,omitempty"`
	MarginRatioParam1    string   `protobuf:"bytes,23,opt,name=margin_ratio_param1,json=marginRatioParam1,proto3" json:"margin_ratio_param1,omitempty"`
	MarginRatioParam2    string   `protobuf:"bytes,24,opt,name=margin_ratio_param2,json=marginRatioParam2,proto3" json:"margin_ratio_param2,omitempty"`
	LmtOrdMinFloor       string   `protobuf:"bytes,25,opt,name=lmt_ord_min_floor,json=lmtOrdMinFloor,proto3" json:"lmt_ord_min_floor,omitempty"`
	MktOrdMinFloor       string   `protobuf:"bytes,26,opt,name=mkt_ord_min_floor,json=mktOrdMinFloor,proto3" json:"mkt_ord_min_floor,omitempty"`
	EndDate              string   `protobuf:"bytes,27,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	PriceLimitType       string   `protobuf:"bytes,28,opt,name=price_limit_type,json=priceLimitType,proto3" json:"price_limit_type,omitempty"`
	ExerciseDate         string   `protobuf:"bytes,29,opt,name=exercise_date,json=exerciseDate,proto3" json:"exercise_date,omitempty"`
	MarginUnit           string   `protobuf:"bytes,30,opt,name=margin_unit,json=marginUnit,proto3" json:"margin_unit,omitempty"`
	SecurityID           string   `protobuf:"bytes,31,opt,name=securityID,proto3" json:"securityID,omitempty"`
	SecurityNameByID     string   `protobuf:"bytes,32,opt,name=security_name_byID,json=securityNameByID,proto3" json:"security_name_byID,omitempty"`
	ContractFlag         string   `protobuf:"bytes,33,opt,name=contract_flag,json=contractFlag,proto3" json:"contract_flag,omitempty"`
	UnderlyingClosePX    string   `protobuf:"bytes,35,opt,name=underlying_closePX,json=underlyingClosePX,proto3" json:"underlying_closePX,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSEStockOption) Reset()         { *m = SSEStockOption{} }
func (m *SSEStockOption) String() string { return proto.CompactTextString(m) }
func (*SSEStockOption) ProtoMessage()    {}
func (*SSEStockOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_302dad79fff882c0, []int{0}
}

func (m *SSEStockOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSEStockOption.Unmarshal(m, b)
}
func (m *SSEStockOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSEStockOption.Marshal(b, m, deterministic)
}
func (m *SSEStockOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSEStockOption.Merge(m, src)
}
func (m *SSEStockOption) XXX_Size() int {
	return xxx_messageInfo_SSEStockOption.Size(m)
}
func (m *SSEStockOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SSEStockOption.DiscardUnknown(m)
}

var xxx_messageInfo_SSEStockOption proto.InternalMessageInfo

func (m *SSEStockOption) GetExercisePrice() string {
	if m != nil {
		return m.ExercisePrice
	}
	return ""
}

func (m *SSEStockOption) GetUpdateVersion() string {
	if m != nil {
		return m.UpdateVersion
	}
	return ""
}

func (m *SSEStockOption) GetOptionType() string {
	if m != nil {
		return m.OptionType
	}
	return ""
}

func (m *SSEStockOption) GetDailyPriceUpLimit() string {
	if m != nil {
		return m.DailyPriceUpLimit
	}
	return ""
}

func (m *SSEStockOption) GetTimeSave() string {
	if m != nil {
		return m.TimeSave
	}
	return ""
}

func (m *SSEStockOption) GetDELIST_Flag() string {
	if m != nil {
		return m.DELIST_Flag
	}
	return ""
}

func (m *SSEStockOption) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *SSEStockOption) GetExpireDate() string {
	if m != nil {
		return m.ExpireDate
	}
	return ""
}

func (m *SSEStockOption) GetContractUnit() string {
	if m != nil {
		return m.ContractUnit
	}
	return ""
}

func (m *SSEStockOption) GetCallOrPut() string {
	if m != nil {
		return m.CallOrPut
	}
	return ""
}

func (m *SSEStockOption) GetLmtOrdMaxFloor() string {
	if m != nil {
		return m.LmtOrdMaxFloor
	}
	return ""
}

func (m *SSEStockOption) GetDeliveryDate() string {
	if m != nil {
		return m.DeliveryDate
	}
	return ""
}

func (m *SSEStockOption) GetChangeFlag() string {
	if m != nil {
		return m.ChangeFlag
	}
	return ""
}

func (m *SSEStockOption) GetMktOrdMaxFloor() string {
	if m != nil {
		return m.MktOrdMaxFloor
	}
	return ""
}

func (m *SSEStockOption) GetUnderlyingType() string {
	if m != nil {
		return m.UnderlyingType
	}
	return ""
}

func (m *SSEStockOption) GetDailyPriceDownLimit() string {
	if m != nil {
		return m.DailyPriceDownLimit
	}
	return ""
}

func (m *SSEStockOption) GetRoundLot() string {
	if m != nil {
		return m.RoundLot
	}
	return ""
}

func (m *SSEStockOption) GetSecurityClosePX() string {
	if m != nil {
		return m.SecurityClosePX
	}
	return ""
}

func (m *SSEStockOption) GetSettlPrice() string {
	if m != nil {
		return m.SettlPrice
	}
	return ""
}

func (m *SSEStockOption) GetContractSymbol() string {
	if m != nil {
		return m.ContractSymbol
	}
	return ""
}

func (m *SSEStockOption) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

func (m *SSEStockOption) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *SSEStockOption) GetMarginRatioParam1() string {
	if m != nil {
		return m.MarginRatioParam1
	}
	return ""
}

func (m *SSEStockOption) GetMarginRatioParam2() string {
	if m != nil {
		return m.MarginRatioParam2
	}
	return ""
}

func (m *SSEStockOption) GetLmtOrdMinFloor() string {
	if m != nil {
		return m.LmtOrdMinFloor
	}
	return ""
}

func (m *SSEStockOption) GetMktOrdMinFloor() string {
	if m != nil {
		return m.MktOrdMinFloor
	}
	return ""
}

func (m *SSEStockOption) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *SSEStockOption) GetPriceLimitType() string {
	if m != nil {
		return m.PriceLimitType
	}
	return ""
}

func (m *SSEStockOption) GetExerciseDate() string {
	if m != nil {
		return m.ExerciseDate
	}
	return ""
}

func (m *SSEStockOption) GetMarginUnit() string {
	if m != nil {
		return m.MarginUnit
	}
	return ""
}

func (m *SSEStockOption) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *SSEStockOption) GetSecurityNameByID() string {
	if m != nil {
		return m.SecurityNameByID
	}
	return ""
}

func (m *SSEStockOption) GetContractFlag() string {
	if m != nil {
		return m.ContractFlag
	}
	return ""
}

func (m *SSEStockOption) GetUnderlyingClosePX() string {
	if m != nil {
		return m.UnderlyingClosePX
	}
	return ""
}

func init() {
	proto.RegisterType((*SSEStockOption)(nil), "goshare.spider.SSEStockOption")
}

func init() {
	proto.RegisterFile("sse.proto", fileDescriptor_302dad79fff882c0)
}

var fileDescriptor_302dad79fff882c0 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xef, 0x4e, 0x1b, 0x39,
	0x14, 0xc5, 0xc5, 0xb2, 0x0b, 0xc4, 0x40, 0xfe, 0x18, 0x96, 0x35, 0x4b, 0xf9, 0xd3, 0xa2, 0x0a,
	0x90, 0x4a, 0xa2, 0x82, 0xfa, 0x02, 0x34, 0xa0, 0x22, 0xd1, 0x12, 0x11, 0xa8, 0xaa, 0x7e, 0xb1,
	0x9c, 0x19, 0x33, 0x58, 0x99, 0xb1, 0x47, 0x1e, 0x4f, 0x48, 0xde, 0xa3, 0x0f, 0x5c, 0xf9, 0xde,
	0x71, 0x48, 0x2a, 0xbe, 0x8d, 0x7e, 0xf7, 0x8c, 0xaf, 0xaf, 0xcf, 0xb1, 0x49, 0xad, 0x28, 0x64,
	0x3b, 0xb7, 0xc6, 0x19, 0x5a, 0x4f, 0x4c, 0xf1, 0x24, 0xac, 0x6c, 0x17, 0xb9, 0x8a, 0xa5, 0x7d,
	0xf7, 0x8b, 0x90, 0x7a, 0xbf, 0x7f, 0xd9, 0x77, 0x26, 0x1a, 0xde, 0xe6, 0x4e, 0x19, 0x4d, 0xdf,
	0x93, 0xba, 0x1c, 0x4b, 0x1b, 0xa9, 0x42, 0xf2, 0xdc, 0xaa, 0x48, 0xb2, 0x85, 0x83, 0x85, 0xe3,
	0xda, 0xdd, 0x7a, 0xa0, 0x3d, 0x0f, 0xbd, 0xac, 0xcc, 0x63, 0xe1, 0x24, 0x1f, 0x49, 0x5b, 0x28,
	0xa3, 0xd9, 0x5f, 0x28, 0x43, 0xfa, 0x1d, 0x21, 0xdd, 0x27, 0xab, 0x06, 0xd6, 0xe5, 0x6e, 0x92,
	0x4b, 0xb6, 0x08, 0x1a, 0x82, 0xe8, 0x7e, 0x92, 0x4b, 0xda, 0x21, 0x9b, 0xb1, 0x50, 0xe9, 0x04,
	0x7b, 0xf1, 0x32, 0xe7, 0xa9, 0xca, 0x94, 0x63, 0x7f, 0x83, 0xb2, 0x05, 0x35, 0xe8, 0xf8, 0x90,
	0xdf, 0xf8, 0x02, 0xdd, 0x21, 0x35, 0xa7, 0x32, 0xc9, 0x0b, 0x31, 0x92, 0xec, 0x1f, 0x50, 0xad,
	0x78, 0xd0, 0x17, 0x23, 0xe9, 0xdb, 0x75, 0x2f, 0x6f, 0xae, 0xfb, 0xf7, 0xfc, 0x2a, 0x15, 0x09,
	0x5b, 0xc2, 0x76, 0x88, 0x3c, 0xa1, 0xbb, 0x84, 0x14, 0x4e, 0x58, 0xc7, 0xfd, 0x26, 0xd9, 0x32,
	0xd4, 0x6b, 0x40, 0xba, 0xc2, 0xc1, 0xff, 0x72, 0x9c, 0x2b, 0x2b, 0xb1, 0xbe, 0x82, 0xff, 0x23,
	0x02, 0xc1, 0x21, 0x59, 0x8f, 0x8c, 0x76, 0x56, 0x44, 0x8e, 0x97, 0x5a, 0x39, 0x56, 0x03, 0xc9,
	0x5a, 0x80, 0x0f, 0x5a, 0x39, 0xba, 0x47, 0x56, 0x23, 0x91, 0xa6, 0xdc, 0x58, 0x9e, 0x97, 0x8e,
	0x11, 0xec, 0xe2, 0xd1, 0xad, 0xed, 0x95, 0x8e, 0x9e, 0x90, 0x56, 0x9a, 0x39, 0x6e, 0x6c, 0xcc,
	0x33, 0x31, 0xe6, 0x8f, 0xa9, 0x31, 0x96, 0xad, 0x82, 0xaa, 0x9e, 0x66, 0xee, 0xd6, 0xc6, 0x5f,
	0xc5, 0xf8, 0xca, 0x53, 0xdf, 0x2f, 0x96, 0xa9, 0x1a, 0x49, 0x3b, 0xc1, 0x2d, 0xad, 0x61, 0xbf,
	0x00, 0xc3, 0xae, 0xa3, 0x27, 0xa1, 0x13, 0xc9, 0x1f, 0xfd, 0xd4, 0xeb, 0xb8, 0x6b, 0x44, 0x30,
	0xf5, 0x09, 0x69, 0x65, 0xc3, 0x3f, 0x1b, 0xd6, 0xb1, 0x61, 0x36, 0x9c, 0x6b, 0x78, 0x44, 0x1a,
	0xa5, 0x8e, 0xa5, 0x4d, 0x27, 0x4a, 0x27, 0x68, 0x5a, 0x03, 0x85, 0x2f, 0x18, 0x8c, 0x3b, 0x27,
	0x5b, 0xb3, 0xc6, 0xc5, 0xe6, 0x59, 0x57, 0xd6, 0x35, 0x41, 0xbf, 0xf1, 0x62, 0x5d, 0xd7, 0x3c,
	0xeb, 0xa9, 0x79, 0xd6, 0x94, 0x3a, 0xe6, 0xa9, 0x71, 0xac, 0x85, 0xe6, 0x01, 0xb8, 0x31, 0xfe,
	0x58, 0x9a, 0x85, 0x8c, 0x4a, 0xab, 0xdc, 0x84, 0x47, 0xa9, 0x29, 0x64, 0xef, 0x07, 0xa3, 0xa0,
	0x69, 0x04, 0xfe, 0x19, 0xb1, 0x9f, 0xb8, 0x90, 0xce, 0xa5, 0x55, 0x42, 0x37, 0x70, 0x62, 0x40,
	0x18, 0xcf, 0x23, 0xd2, 0x98, 0xfa, 0x54, 0x4c, 0xb2, 0x81, 0x49, 0xd9, 0x26, 0x8e, 0x11, 0x70,
	0x1f, 0x28, 0x6d, 0x92, 0x45, 0x5d, 0x66, 0xec, 0x5f, 0x28, 0xfa, 0x4f, 0xba, 0x47, 0x48, 0xd0,
	0x5c, 0x77, 0xd9, 0x56, 0x75, 0x98, 0x53, 0x42, 0xdb, 0x64, 0x23, 0x13, 0x36, 0x51, 0x9a, 0x5b,
	0xe1, 0x94, 0xe1, 0xb9, 0xb0, 0x22, 0xfb, 0xc8, 0xfe, 0xc3, 0xc0, 0x62, 0xe9, 0xce, 0x57, 0x7a,
	0x50, 0x78, 0x5d, 0x7f, 0xc6, 0xd8, 0xeb, 0xfa, 0xb3, 0xb9, 0x74, 0x28, 0x5d, 0x99, 0xb5, 0x3d,
	0x97, 0x0e, 0xa5, 0xd1, 0xac, 0x59, 0x5f, 0xa7, 0xd2, 0xff, 0xe7, 0x7c, 0x0d, 0xd2, 0x6d, 0xb2,
	0x22, 0x75, 0x8c, 0x19, 0xda, 0x01, 0xc5, 0xb2, 0xd4, 0x31, 0xc4, 0xe7, 0x98, 0x34, 0xd1, 0x43,
	0xb0, 0x0f, 0x3d, 0x7f, 0x83, 0x8b, 0x00, 0x07, 0xeb, 0xc0, 0xf3, 0x43, 0x32, 0x7d, 0x05, 0x70,
	0xa5, 0x5d, 0x4c, 0x63, 0x80, 0x21, 0x8d, 0xd5, 0xbc, 0x70, 0x41, 0xf6, 0xf0, 0x00, 0x11, 0x55,
	0xd7, 0x83, 0x04, 0x3f, 0xaf, 0xbb, 0x6c, 0x3f, 0x78, 0x17, 0x08, 0xfd, 0x40, 0xe8, 0x34, 0x07,
	0x5a, 0x64, 0x92, 0x0f, 0xbc, 0xee, 0x00, 0x74, 0xd3, 0x84, 0x7c, 0x13, 0x99, 0xbc, 0xf0, 0xea,
	0xd9, 0x1b, 0x09, 0xf1, 0x7f, 0x3b, 0x7f, 0x23, 0xe1, 0x02, 0x9c, 0x12, 0x3a, 0x93, 0xea, 0x10,
	0xae, 0x43, 0xb4, 0xe0, 0xa5, 0x52, 0xc5, 0xeb, 0xe2, 0xd3, 0xcf, 0xf3, 0x44, 0xb9, 0xa7, 0x72,
	0xd0, 0x8e, 0x4c, 0xd6, 0xb9, 0x13, 0x23, 0xa9, 0xbf, 0x94, 0xa6, 0x93, 0x98, 0x53, 0x78, 0x46,
	0x3b, 0x85, 0x7f, 0x2f, 0xab, 0xef, 0x7c, 0x98, 0x74, 0xf0, 0x35, 0x1d, 0x2c, 0x01, 0x39, 0xff,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x6c, 0x35, 0x00, 0x71, 0x05, 0x00, 0x00,
}
